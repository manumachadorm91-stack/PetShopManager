{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive pet shop management system built with React and Node.js. The application provides a complete administrative interface for managing pets, clients, products, sales, and reports for a pet store business. It includes features for inventory management, customer relationship management, sales tracking, and business analytics. The system also has a dedicated WPC (Wood Plastic Composite) product catalog section, suggesting the business may specialize in composite materials for pet-related construction or home improvement products.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom CSS variables for theming, supporting both light and dark modes\n- **Build Tool**: Vite for fast development and optimized builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the full stack\n- **API Design**: RESTful API endpoints following conventional HTTP methods\n- **Request Handling**: Express middleware for JSON parsing, CORS, and request logging\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **Development**: Hot module replacement and development server integration with Vite\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting for scalable cloud database\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema Management**: Shared schema definitions between client and server for consistency\n- **Migrations**: Drizzle Kit for database schema migrations and version control\n- **Connection**: Connection pooling with WebSocket support for serverless environments\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User Management**: Basic user authentication system with role-based access control\n- **Security**: Password hashing and secure session handling\n- **Authorization**: Role-based permissions for different user types (admin, vendor, inventory)\n\n## External Dependencies\n- **Database Hosting**: Neon serverless PostgreSQL for managed database infrastructure\n- **UI Framework**: Radix UI for accessible, unstyled component primitives\n- **Charts and Visualization**: Recharts for business analytics and reporting dashboards\n- **Date Handling**: date-fns for consistent date manipulation and formatting\n- **Development Tools**: Replit integration for cloud-based development environment\n- **Asset Management**: Public asset serving for product images and WPC catalog media","size_bytes":3105},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/dbStorage.ts":{"content":"import { \n  users, \n  type User, \n  type InsertUser, \n  pets, \n  type Pet, \n  type InsertPet,\n  clients,\n  type Client,\n  type InsertClient,\n  products,\n  type Product,\n  type InsertProduct,\n  sales,\n  type Sale,\n  type InsertSale,\n  saleItems,\n  type SaleItem,\n  type InsertSaleItem\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // Métodos para usuarios\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Métodos para mascotas\n  async getPets(): Promise<Pet[]> {\n    return await db.select().from(pets);\n  }\n\n  async getPet(id: number): Promise<Pet | undefined> {\n    const [pet] = await db.select().from(pets).where(eq(pets.id, id));\n    return pet || undefined;\n  }\n\n  async createPet(insertPet: InsertPet): Promise<Pet> {\n    const now = new Date().toISOString();\n    const petData = {\n      ...insertPet,\n      createdAt: now\n    };\n    \n    const [pet] = await db\n      .insert(pets)\n      .values(petData)\n      .returning();\n    \n    return pet;\n  }\n\n  async updatePet(id: number, updatePet: InsertPet): Promise<Pet | undefined> {\n    const [existingPet] = await db\n      .select()\n      .from(pets)\n      .where(eq(pets.id, id));\n    \n    if (!existingPet) {\n      return undefined;\n    }\n\n    const [updatedPet] = await db\n      .update(pets)\n      .set({\n        ...updatePet,\n      })\n      .where(eq(pets.id, id))\n      .returning();\n    \n    return updatedPet;\n  }\n\n  async deletePet(id: number): Promise<boolean> {\n    const [existingPet] = await db\n      .select()\n      .from(pets)\n      .where(eq(pets.id, id));\n    \n    if (!existingPet) {\n      return false;\n    }\n    \n    await db\n      .delete(pets)\n      .where(eq(pets.id, id));\n    \n    return true;\n  }\n\n  // Métodos para clientes\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients);\n  }\n\n  async getClient(id: number): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const now = new Date().toISOString();\n    const clientData = {\n      ...insertClient,\n      createdAt: now\n    };\n    \n    const [client] = await db\n      .insert(clients)\n      .values(clientData)\n      .returning();\n    \n    return client;\n  }\n\n  async updateClient(id: number, updateClient: InsertClient): Promise<Client | undefined> {\n    const [existingClient] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, id));\n    \n    if (!existingClient) {\n      return undefined;\n    }\n\n    const [updatedClient] = await db\n      .update(clients)\n      .set({\n        ...updateClient,\n      })\n      .where(eq(clients.id, id))\n      .returning();\n    \n    return updatedClient;\n  }\n\n  async deleteClient(id: number): Promise<boolean> {\n    const [existingClient] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, id));\n    \n    if (!existingClient) {\n      return false;\n    }\n    \n    await db\n      .delete(clients)\n      .where(eq(clients.id, id));\n    \n    return true;\n  }\n\n  // Métodos para productos\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const now = new Date().toISOString();\n    const productData = {\n      ...insertProduct,\n      createdAt: now\n    };\n    \n    const [product] = await db\n      .insert(products)\n      .values(productData)\n      .returning();\n    \n    return product;\n  }\n\n  async updateProduct(id: number, updateProduct: InsertProduct): Promise<Product | undefined> {\n    const [existingProduct] = await db\n      .select()\n      .from(products)\n      .where(eq(products.id, id));\n    \n    if (!existingProduct) {\n      return undefined;\n    }\n\n    const [updatedProduct] = await db\n      .update(products)\n      .set({\n        ...updateProduct,\n      })\n      .where(eq(products.id, id))\n      .returning();\n    \n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const [existingProduct] = await db\n      .select()\n      .from(products)\n      .where(eq(products.id, id));\n    \n    if (!existingProduct) {\n      return false;\n    }\n    \n    await db\n      .delete(products)\n      .where(eq(products.id, id));\n    \n    return true;\n  }\n\n  // Métodos para ventas\n  async getSales(): Promise<Sale[]> {\n    return await db.select().from(sales);\n  }\n\n  async getSale(id: number): Promise<Sale | undefined> {\n    const [sale] = await db.select().from(sales).where(eq(sales.id, id));\n    return sale || undefined;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<Sale> {\n    const now = new Date().toISOString();\n    const saleData = {\n      ...insertSale,\n      createdAt: now\n    };\n    \n    // Iniciar una transacción para crear la venta y sus items\n    const [sale] = await db\n      .insert(sales)\n      .values(saleData)\n      .returning();\n    \n    // Crear los items de la venta con el ID de la venta\n    for (const item of items) {\n      await db\n        .insert(saleItems)\n        .values({\n          ...item,\n          saleId: sale.id\n        });\n    }\n    \n    return sale;\n  }\n\n  async updateSale(id: number, updateSale: InsertSale): Promise<Sale | undefined> {\n    const [existingSale] = await db\n      .select()\n      .from(sales)\n      .where(eq(sales.id, id));\n    \n    if (!existingSale) {\n      return undefined;\n    }\n\n    const [updatedSale] = await db\n      .update(sales)\n      .set({\n        ...updateSale,\n      })\n      .where(eq(sales.id, id))\n      .returning();\n    \n    return updatedSale;\n  }\n\n  async deleteSale(id: number): Promise<boolean> {\n    const [existingSale] = await db\n      .select()\n      .from(sales)\n      .where(eq(sales.id, id));\n    \n    if (!existingSale) {\n      return false;\n    }\n    \n    // Primero eliminar los items asociados a esta venta\n    await db\n      .delete(saleItems)\n      .where(eq(saleItems.saleId, id));\n    \n    // Luego eliminar la venta\n    await db\n      .delete(sales)\n      .where(eq(sales.id, id));\n    \n    return true;\n  }\n\n  // Método para obtener los ítems de una venta\n  async getSaleItems(saleId: number): Promise<SaleItem[]> {\n    return await db\n      .select()\n      .from(saleItems)\n      .where(eq(saleItems.saleId, saleId));\n  }\n}","size_bytes":7155},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertPetSchema, \n  petParamsSchema,\n  insertClientSchema,\n  clientParamsSchema,\n  insertProductSchema,\n  productParamsSchema,\n  insertSaleSchema,\n  saleParamsSchema,\n  insertSaleItemSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Rutas para mascotas\n  // GET - Obtener todas las mascotas\n  app.get(\"/api/pets\", async (req, res) => {\n    try {\n      const pets = await storage.getPets();\n      return res.json(pets);\n    } catch (error) {\n      console.error(\"Error al obtener mascotas:\", error);\n      return res.status(500).json({ message: \"Error al obtener mascotas\" });\n    }\n  });\n\n  // GET - Obtener una mascota por ID\n  app.get(\"/api/pets/:id\", async (req, res) => {\n    try {\n      const result = petParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de mascota inválido\" });\n      }\n      \n      const { id } = result.data;\n      const pet = await storage.getPet(id);\n      \n      if (!pet) {\n        return res.status(404).json({ message: \"Mascota no encontrada\" });\n      }\n      \n      return res.json(pet);\n    } catch (error) {\n      console.error(\"Error al obtener mascota:\", error);\n      return res.status(500).json({ message: \"Error al obtener mascota\" });\n    }\n  });\n\n  // POST - Crear una nueva mascota\n  app.post(\"/api/pets\", async (req, res) => {\n    try {\n      const result = insertPetSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Datos de mascota inválidos\", \n          errors: result.error.format() \n        });\n      }\n      \n      const newPet = await storage.createPet(result.data);\n      return res.status(201).json(newPet);\n    } catch (error) {\n      console.error(\"Error al crear mascota:\", error);\n      return res.status(500).json({ message: \"Error al crear mascota\" });\n    }\n  });\n\n  // PUT - Actualizar una mascota existente\n  app.put(\"/api/pets/:id\", async (req, res) => {\n    try {\n      const paramsResult = petParamsSchema.safeParse(req.params);\n      \n      if (!paramsResult.success) {\n        return res.status(400).json({ message: \"ID de mascota inválido\" });\n      }\n      \n      const { id } = paramsResult.data;\n      \n      const bodyResult = insertPetSchema.safeParse(req.body);\n      \n      if (!bodyResult.success) {\n        return res.status(400).json({ \n          message: \"Datos de mascota inválidos\", \n          errors: bodyResult.error.format() \n        });\n      }\n      \n      const updatedPet = await storage.updatePet(id, bodyResult.data);\n      \n      if (!updatedPet) {\n        return res.status(404).json({ message: \"Mascota no encontrada\" });\n      }\n      \n      return res.json(updatedPet);\n    } catch (error) {\n      console.error(\"Error al actualizar mascota:\", error);\n      return res.status(500).json({ message: \"Error al actualizar mascota\" });\n    }\n  });\n\n  // DELETE - Eliminar una mascota\n  app.delete(\"/api/pets/:id\", async (req, res) => {\n    try {\n      const result = petParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de mascota inválido\" });\n      }\n      \n      const { id } = result.data;\n      const success = await storage.deletePet(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Mascota no encontrada\" });\n      }\n      \n      return res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error al eliminar mascota:\", error);\n      return res.status(500).json({ message: \"Error al eliminar mascota\" });\n    }\n  });\n\n  // Rutas para clientes\n  // GET - Obtener todos los clientes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getClients();\n      return res.json(clients);\n    } catch (error) {\n      console.error(\"Error al obtener clientes:\", error);\n      return res.status(500).json({ message: \"Error al obtener clientes\" });\n    }\n  });\n\n  // GET - Obtener un cliente por ID\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const result = clientParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de cliente inválido\" });\n      }\n      \n      const { id } = result.data;\n      const client = await storage.getClient(id);\n      \n      if (!client) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      \n      return res.json(client);\n    } catch (error) {\n      console.error(\"Error al obtener cliente:\", error);\n      return res.status(500).json({ message: \"Error al obtener cliente\" });\n    }\n  });\n\n  // POST - Crear un nuevo cliente\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const result = insertClientSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Datos de cliente inválidos\", \n          errors: result.error.format() \n        });\n      }\n      \n      const newClient = await storage.createClient(result.data);\n      return res.status(201).json(newClient);\n    } catch (error) {\n      console.error(\"Error al crear cliente:\", error);\n      return res.status(500).json({ message: \"Error al crear cliente\" });\n    }\n  });\n\n  // PUT - Actualizar un cliente existente\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const paramsResult = clientParamsSchema.safeParse(req.params);\n      \n      if (!paramsResult.success) {\n        return res.status(400).json({ message: \"ID de cliente inválido\" });\n      }\n      \n      const { id } = paramsResult.data;\n      \n      const bodyResult = insertClientSchema.safeParse(req.body);\n      \n      if (!bodyResult.success) {\n        return res.status(400).json({ \n          message: \"Datos de cliente inválidos\", \n          errors: bodyResult.error.format() \n        });\n      }\n      \n      const updatedClient = await storage.updateClient(id, bodyResult.data);\n      \n      if (!updatedClient) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      \n      return res.json(updatedClient);\n    } catch (error) {\n      console.error(\"Error al actualizar cliente:\", error);\n      return res.status(500).json({ message: \"Error al actualizar cliente\" });\n    }\n  });\n\n  // DELETE - Eliminar un cliente\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const result = clientParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de cliente inválido\" });\n      }\n      \n      const { id } = result.data;\n      const success = await storage.deleteClient(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      \n      return res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error al eliminar cliente:\", error);\n      return res.status(500).json({ message: \"Error al eliminar cliente\" });\n    }\n  });\n\n  // Rutas para productos\n  // GET - Obtener todos los productos\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      return res.json(products);\n    } catch (error) {\n      console.error(\"Error al obtener productos:\", error);\n      return res.status(500).json({ message: \"Error al obtener productos\" });\n    }\n  });\n\n  // GET - Obtener un producto por ID\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const result = productParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de producto inválido\" });\n      }\n      \n      const { id } = result.data;\n      const product = await storage.getProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      \n      return res.json(product);\n    } catch (error) {\n      console.error(\"Error al obtener producto:\", error);\n      return res.status(500).json({ message: \"Error al obtener producto\" });\n    }\n  });\n\n  // POST - Crear un nuevo producto\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const result = insertProductSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Datos de producto inválidos\", \n          errors: result.error.format() \n        });\n      }\n      \n      const newProduct = await storage.createProduct(result.data);\n      return res.status(201).json(newProduct);\n    } catch (error) {\n      console.error(\"Error al crear producto:\", error);\n      return res.status(500).json({ message: \"Error al crear producto\" });\n    }\n  });\n\n  // PUT - Actualizar un producto existente\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const paramsResult = productParamsSchema.safeParse(req.params);\n      \n      if (!paramsResult.success) {\n        return res.status(400).json({ message: \"ID de producto inválido\" });\n      }\n      \n      const { id } = paramsResult.data;\n      \n      const bodyResult = insertProductSchema.safeParse(req.body);\n      \n      if (!bodyResult.success) {\n        return res.status(400).json({ \n          message: \"Datos de producto inválidos\", \n          errors: bodyResult.error.format() \n        });\n      }\n      \n      const updatedProduct = await storage.updateProduct(id, bodyResult.data);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      \n      return res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error al actualizar producto:\", error);\n      return res.status(500).json({ message: \"Error al actualizar producto\" });\n    }\n  });\n\n  // DELETE - Eliminar un producto\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const result = productParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de producto inválido\" });\n      }\n      \n      const { id } = result.data;\n      const success = await storage.deleteProduct(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      \n      return res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error al eliminar producto:\", error);\n      return res.status(500).json({ message: \"Error al eliminar producto\" });\n    }\n  });\n\n  // Rutas para ventas\n  // GET - Obtener todas las ventas\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      return res.json(sales);\n    } catch (error) {\n      console.error(\"Error al obtener ventas:\", error);\n      return res.status(500).json({ message: \"Error al obtener ventas\" });\n    }\n  });\n\n  // GET - Obtener una venta por ID\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const result = saleParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de venta inválido\" });\n      }\n      \n      const { id } = result.data;\n      const sale = await storage.getSale(id);\n      \n      if (!sale) {\n        return res.status(404).json({ message: \"Venta no encontrada\" });\n      }\n      \n      // Obtener los items de la venta\n      const items = await storage.getSaleItems(id);\n      \n      return res.json({ \n        ...sale, \n        items \n      });\n    } catch (error) {\n      console.error(\"Error al obtener venta:\", error);\n      return res.status(500).json({ message: \"Error al obtener venta\" });\n    }\n  });\n\n  // POST - Crear una nueva venta con sus items\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      // Validar la estructura básica del objeto recibido\n      const saleDataSchema = z.object({\n        sale: insertSaleSchema,\n        items: z.array(insertSaleItemSchema)\n      });\n      \n      const result = saleDataSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Datos de venta inválidos\", \n          errors: result.error.format() \n        });\n      }\n      \n      const { sale, items } = result.data;\n      const newSale = await storage.createSale(sale, items);\n      \n      // Obtener los items asociados a la venta\n      const saleItems = await storage.getSaleItems(newSale.id);\n      \n      return res.status(201).json({\n        ...newSale,\n        items: saleItems\n      });\n    } catch (error) {\n      console.error(\"Error al crear venta:\", error);\n      return res.status(500).json({ message: \"Error al crear venta\" });\n    }\n  });\n\n  // DELETE - Eliminar una venta y sus items\n  app.delete(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const result = saleParamsSchema.safeParse(req.params);\n      \n      if (!result.success) {\n        return res.status(400).json({ message: \"ID de venta inválido\" });\n      }\n      \n      const { id } = result.data;\n      const success = await storage.deleteSale(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Venta no encontrada\" });\n      }\n      \n      return res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error al eliminar venta:\", error);\n      return res.status(500).json({ message: \"Error al eliminar venta\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13690},"server/storage.ts":{"content":"import { \n  users, \n  type User, \n  type InsertUser, \n  pets, \n  type Pet, \n  type InsertPet,\n  clients,\n  type Client,\n  type InsertClient,\n  products,\n  type Product,\n  type InsertProduct,\n  sales,\n  type Sale,\n  type InsertSale,\n  saleItems,\n  type SaleItem,\n  type InsertSaleItem\n} from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Métodos para mascotas\n  getPets(): Promise<Pet[]>;\n  getPet(id: number): Promise<Pet | undefined>;\n  createPet(pet: InsertPet): Promise<Pet>;\n  updatePet(id: number, pet: InsertPet): Promise<Pet | undefined>;\n  deletePet(id: number): Promise<boolean>;\n\n  // Métodos para clientes\n  getClients(): Promise<Client[]>;\n  getClient(id: number): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: number, client: InsertClient): Promise<Client | undefined>;\n  deleteClient(id: number): Promise<boolean>;\n\n  // Métodos para productos\n  getProducts(): Promise<Product[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: InsertProduct): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n\n  // Métodos para ventas\n  getSales(): Promise<Sale[]>;\n  getSale(id: number): Promise<Sale | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<Sale>;\n  updateSale(id: number, sale: InsertSale): Promise<Sale | undefined>;\n  deleteSale(id: number): Promise<boolean>;\n\n  // Métodos para items de venta\n  getSaleItems(saleId: number): Promise<SaleItem[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private petStore: Map<number, Pet>;\n  private clientStore: Map<number, Client>;\n  private productStore: Map<number, Product>;\n  private saleStore: Map<number, Sale>;\n  private saleItemStore: Map<number, SaleItem>;\n  \n  private userCurrentId: number;\n  private petCurrentId: number;\n  private clientCurrentId: number;\n  private productCurrentId: number;\n  private saleCurrentId: number;\n  private saleItemCurrentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.petStore = new Map();\n    this.clientStore = new Map();\n    this.productStore = new Map();\n    this.saleStore = new Map();\n    this.saleItemStore = new Map();\n    \n    this.userCurrentId = 1;\n    this.petCurrentId = 1;\n    this.clientCurrentId = 1;\n    this.productCurrentId = 1;\n    this.saleCurrentId = 1;\n    this.saleItemCurrentId = 1;\n    \n    // Agregar datos iniciales para demostración\n    this.initializePets();\n    this.initializeClients();\n    this.initializeProducts();\n    this.initializeSales();\n  }\n\n  private initializePets() {\n    const initialPets: InsertPet[] = [\n      {\n        name: \"Max\",\n        species: \"Perro\",\n        breed: \"Labrador\",\n        age: 3,\n        ageUnit: \"years\",\n        gender: \"male\",\n        owner: \"Carlos Ramírez\",\n        weight: 25.5,\n        photo: \"https://images.unsplash.com/photo-1543466835-00a7907e9de1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\",\n        notes: \"Muy juguetón, le gusta correr en el parque.\",\n        active: true\n      },\n      {\n        name: \"Luna\",\n        species: \"Gato\",\n        breed: \"Siamés\",\n        age: 2,\n        ageUnit: \"years\",\n        gender: \"female\",\n        owner: \"María González\",\n        weight: 4.2,\n        photo: \"https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\",\n        notes: \"Muy tranquila y cariñosa.\",\n        active: true\n      },\n      {\n        name: \"Paco\",\n        species: \"Ave\",\n        breed: \"Loro\",\n        age: 5,\n        ageUnit: \"years\",\n        gender: \"male\",\n        owner: \"Ana Martínez\",\n        weight: 0.3,\n        photo: \"https://images.unsplash.com/photo-1552728089-57bdde30beb3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\",\n        notes: \"Habla varias palabras, muy inteligente.\",\n        active: true\n      }\n    ];\n\n    initialPets.forEach(pet => {\n      this.createPet(pet);\n    });\n  }\n\n  private initializeClients() {\n    const initialClients: InsertClient[] = [\n      {\n        name: \"Carlos Ramírez\",\n        email: \"carlos@example.com\",\n        phone: \"555-123-4567\",\n        address: \"Av. Principal 123\",\n        city: \"Madrid\",\n        postalCode: \"28001\",\n        notes: \"Cliente frecuente\",\n        active: true\n      },\n      {\n        name: \"María González\",\n        email: \"maria@example.com\",\n        phone: \"555-234-5678\",\n        address: \"Calle Secundaria 456\",\n        city: \"Barcelona\",\n        postalCode: \"08001\",\n        notes: \"Prefiere contacto por email\",\n        active: true\n      },\n      {\n        name: \"Ana Martínez\",\n        email: \"ana@example.com\",\n        phone: \"555-345-6789\",\n        address: \"Plaza Mayor 789\",\n        city: \"Valencia\",\n        postalCode: \"46001\",\n        notes: \"\",\n        active: true\n      },\n      {\n        name: \"Juan Rodríguez\",\n        email: \"juan@example.com\",\n        phone: \"555-456-7890\",\n        address: \"Avenida Central 101\",\n        city: \"Sevilla\",\n        postalCode: \"41001\",\n        notes: \"Cliente nuevo\",\n        active: true\n      }\n    ];\n\n    initialClients.forEach(client => {\n      this.createClient(client);\n    });\n  }\n\n  private initializeProducts() {\n    const initialProducts: InsertProduct[] = [\n      {\n        name: \"Alimento Premium para Perros\",\n        description: \"Alimento completo y balanceado para perros adultos de todas las razas\",\n        category: \"Alimentos\",\n        price: 29.99,\n        stock: 50,\n        image: \"https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&q=80&w=100&h=100\",\n        sku: \"ALIM-P-001\",\n        active: true\n      },\n      {\n        name: \"Comedero Automático\",\n        description: \"Dispensador automático de comida para mascotas programable\",\n        category: \"Accesorios\",\n        price: 59.99,\n        stock: 15,\n        image: \"https://images.unsplash.com/photo-1588269965622-455e267ec846?ixlib=rb-4.0.3&q=80&w=100&h=100\",\n        sku: \"ACC-C-001\",\n        active: true\n      },\n      {\n        name: \"Cama para Gatos\",\n        description: \"Cama acolchada y suave para gatos de todos los tamaños\",\n        category: \"Accesorios\",\n        price: 24.99,\n        stock: 20,\n        image: \"https://images.unsplash.com/photo-1540948305894-8c6e79fec7c5?ixlib=rb-4.0.3&q=80&w=100&h=100\",\n        sku: \"ACC-G-001\",\n        active: true\n      },\n      {\n        name: \"Juguete para Perros\",\n        description: \"Juguete resistente para perros, ideal para masticar\",\n        category: \"Juguetes\",\n        price: 12.99,\n        stock: 30,\n        image: \"https://images.unsplash.com/photo-1567772722058-38333c59ff93?ixlib=rb-4.0.3&q=80&w=100&h=100\",\n        sku: \"JUG-P-001\",\n        active: true\n      },\n      {\n        name: \"Arena para Gatos\",\n        description: \"Arena aglomerante premium para gatos, control de olores\",\n        category: \"Higiene\",\n        price: 15.99,\n        stock: 40,\n        image: \"https://images.unsplash.com/photo-1585264550248-1778be3b6368?ixlib=rb-4.0.3&q=80&w=100&h=100\",\n        sku: \"HIG-G-001\",\n        active: true\n      }\n    ];\n\n    initialProducts.forEach(product => {\n      this.createProduct(product);\n    });\n  }\n\n  private initializeSales() {\n    const initialSales: {sale: InsertSale, items: InsertSaleItem[]}[] = [\n      {\n        sale: {\n          clientName: \"Carlos Ramírez\",\n          total: 82.97,\n          paymentMethod: \"Tarjeta de crédito\",\n          status: \"completed\",\n          notes: \"\"\n        },\n        items: [\n          {\n            saleId: 1,\n            productName: \"Alimento Premium para Perros\",\n            quantity: 2,\n            unitPrice: 29.99,\n            subtotal: 59.98\n          },\n          {\n            saleId: 1,\n            productName: \"Juguete para Perros\",\n            quantity: 1,\n            unitPrice: 12.99,\n            subtotal: 12.99\n          },\n          {\n            saleId: 1,\n            productName: \"Comedero Automático\",\n            quantity: 1,\n            unitPrice: 59.99,\n            subtotal: 10.00 // Precio con descuento aplicado\n          }\n        ]\n      },\n      {\n        sale: {\n          clientName: \"María González\",\n          total: 40.98,\n          paymentMethod: \"Efectivo\",\n          status: \"completed\",\n          notes: \"\"\n        },\n        items: [\n          {\n            saleId: 2,\n            productName: \"Cama para Gatos\",\n            quantity: 1,\n            unitPrice: 24.99,\n            subtotal: 24.99\n          },\n          {\n            saleId: 2,\n            productName: \"Arena para Gatos\",\n            quantity: 1,\n            unitPrice: 15.99,\n            subtotal: 15.99\n          }\n        ]\n      }\n    ];\n\n    initialSales.forEach(({sale, items}) => {\n      this.createSale(sale, items);\n    });\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userCurrentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Implementación de métodos para mascotas\n  async getPets(): Promise<Pet[]> {\n    return Array.from(this.petStore.values());\n  }\n\n  async getPet(id: number): Promise<Pet | undefined> {\n    return this.petStore.get(id);\n  }\n\n  async createPet(insertPet: InsertPet): Promise<Pet> {\n    const id = this.petCurrentId++;\n    const now = new Date().toISOString();\n    \n    // Aseguramos que todos los campos opcionales tengan un valor definido\n    const pet: Pet = { \n      id, \n      name: insertPet.name,\n      species: insertPet.species,\n      breed: insertPet.breed || null,\n      age: insertPet.age || null,\n      ageUnit: insertPet.ageUnit || null,\n      gender: insertPet.gender || null,\n      weight: insertPet.weight || null,\n      photo: insertPet.photo || null,\n      owner: insertPet.owner,\n      notes: insertPet.notes || null,\n      active: insertPet.active === undefined ? true : insertPet.active,\n      createdAt: now \n    };\n    \n    this.petStore.set(id, pet);\n    return pet;\n  }\n\n  async updatePet(id: number, updatePet: InsertPet): Promise<Pet | undefined> {\n    const existingPet = await this.getPet(id);\n    \n    if (!existingPet) {\n      return undefined;\n    }\n\n    const updatedPet: Pet = { \n      id,\n      name: updatePet.name,\n      species: updatePet.species,\n      breed: updatePet.breed || null,\n      age: updatePet.age || null,\n      ageUnit: updatePet.ageUnit || null,\n      gender: updatePet.gender || null,\n      weight: updatePet.weight || null,\n      photo: updatePet.photo || null,\n      owner: updatePet.owner,\n      notes: updatePet.notes || null,\n      active: updatePet.active === undefined ? true : updatePet.active,\n      createdAt: existingPet.createdAt \n    };\n    \n    this.petStore.set(id, updatedPet);\n    return updatedPet;\n  }\n\n  async deletePet(id: number): Promise<boolean> {\n    const exists = this.petStore.has(id);\n    \n    if (!exists) {\n      return false;\n    }\n    \n    return this.petStore.delete(id);\n  }\n\n  // Implementación de métodos para clientes\n  async getClients(): Promise<Client[]> {\n    return Array.from(this.clientStore.values());\n  }\n\n  async getClient(id: number): Promise<Client | undefined> {\n    return this.clientStore.get(id);\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = this.clientCurrentId++;\n    const now = new Date().toISOString();\n    \n    const client: Client = { \n      id,\n      name: insertClient.name,\n      email: insertClient.email || null,\n      phone: insertClient.phone || null,\n      address: insertClient.address || null,\n      city: insertClient.city || null,\n      postalCode: insertClient.postalCode || null,\n      notes: insertClient.notes || null,\n      active: insertClient.active === undefined ? true : insertClient.active,\n      createdAt: now\n    };\n    \n    this.clientStore.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: number, updateClient: InsertClient): Promise<Client | undefined> {\n    const existingClient = await this.getClient(id);\n    \n    if (!existingClient) {\n      return undefined;\n    }\n\n    const updatedClient: Client = { \n      id,\n      name: updateClient.name,\n      email: updateClient.email || null,\n      phone: updateClient.phone || null,\n      address: updateClient.address || null,\n      city: updateClient.city || null,\n      postalCode: updateClient.postalCode || null,\n      notes: updateClient.notes || null,\n      active: updateClient.active === undefined ? existingClient.active : updateClient.active,\n      createdAt: existingClient.createdAt \n    };\n    \n    this.clientStore.set(id, updatedClient);\n    return updatedClient;\n  }\n\n  async deleteClient(id: number): Promise<boolean> {\n    const exists = this.clientStore.has(id);\n    \n    if (!exists) {\n      return false;\n    }\n    \n    return this.clientStore.delete(id);\n  }\n\n  // Implementación de métodos para productos\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.productStore.values());\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    return this.productStore.get(id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = this.productCurrentId++;\n    const now = new Date().toISOString();\n    \n    const product: Product = { \n      id,\n      name: insertProduct.name,\n      description: insertProduct.description || null,\n      category: insertProduct.category,\n      price: insertProduct.price,\n      stock: insertProduct.stock || 0,\n      image: insertProduct.image || null,\n      sku: insertProduct.sku || null,\n      active: insertProduct.active === undefined ? true : insertProduct.active,\n      createdAt: now \n    };\n    \n    this.productStore.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: number, updateProduct: InsertProduct): Promise<Product | undefined> {\n    const existingProduct = await this.getProduct(id);\n    \n    if (!existingProduct) {\n      return undefined;\n    }\n\n    const updatedProduct: Product = { \n      id,\n      name: updateProduct.name,\n      description: updateProduct.description || null,\n      category: updateProduct.category,\n      price: updateProduct.price,\n      stock: updateProduct.stock === undefined ? existingProduct.stock : updateProduct.stock,\n      image: updateProduct.image || null,\n      sku: updateProduct.sku || null,\n      active: updateProduct.active === undefined ? existingProduct.active : updateProduct.active,\n      createdAt: existingProduct.createdAt \n    };\n    \n    this.productStore.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const exists = this.productStore.has(id);\n    \n    if (!exists) {\n      return false;\n    }\n    \n    return this.productStore.delete(id);\n  }\n\n  // Implementación de métodos para ventas\n  async getSales(): Promise<Sale[]> {\n    return Array.from(this.saleStore.values());\n  }\n\n  async getSale(id: number): Promise<Sale | undefined> {\n    return this.saleStore.get(id);\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<Sale> {\n    const id = this.saleCurrentId++;\n    const now = new Date().toISOString();\n    \n    const sale: Sale = { \n      id,\n      clientName: insertSale.clientName,\n      total: insertSale.total,\n      paymentMethod: insertSale.paymentMethod,\n      status: insertSale.status || \"completed\",\n      notes: insertSale.notes || null,\n      createdAt: now \n    };\n    \n    this.saleStore.set(id, sale);\n    \n    // Crear los ítems de la venta\n    items.forEach(item => {\n      const itemId = this.saleItemCurrentId++;\n      const saleItem: SaleItem = { \n        id: itemId,\n        saleId: id,\n        productName: item.productName,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        subtotal: item.subtotal\n      };\n      this.saleItemStore.set(itemId, saleItem);\n    });\n\n    return sale;\n  }\n\n  async updateSale(id: number, updateSale: InsertSale): Promise<Sale | undefined> {\n    const existingSale = await this.getSale(id);\n    \n    if (!existingSale) {\n      return undefined;\n    }\n\n    const updatedSale: Sale = { \n      id,\n      clientName: updateSale.clientName,\n      total: updateSale.total,\n      paymentMethod: updateSale.paymentMethod,\n      status: updateSale.status || existingSale.status,\n      notes: updateSale.notes || existingSale.notes,\n      createdAt: existingSale.createdAt \n    };\n    \n    this.saleStore.set(id, updatedSale);\n    return updatedSale;\n  }\n\n  async deleteSale(id: number): Promise<boolean> {\n    const exists = this.saleStore.has(id);\n    \n    if (!exists) {\n      return false;\n    }\n    \n    // Eliminar los items asociados a esta venta\n    const saleItems = await this.getSaleItems(id);\n    saleItems.forEach(item => {\n      this.saleItemStore.delete(item.id);\n    });\n    \n    return this.saleStore.delete(id);\n  }\n\n  // Método para obtener los ítems de una venta\n  async getSaleItems(saleId: number): Promise<SaleItem[]> {\n    return Array.from(this.saleItemStore.values()).filter(item => item.saleId === saleId);\n  }\n}\n\n// Importamos la implementación de almacenamiento de base de datos\nimport { DatabaseStorage } from \"./dbStorage\";\n\n// Cambiamos de MemStorage a DatabaseStorage para persistencia de datos\nexport const storage = new DatabaseStorage();\n","size_bytes":18059},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, real, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Definición de tabla de mascotas\nexport const pets = pgTable(\"pets\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  species: text(\"species\").notNull(),\n  breed: text(\"breed\"),\n  age: integer(\"age\"),\n  ageUnit: text(\"age_unit\").default(\"years\"),\n  gender: text(\"gender\").default(\"male\"),\n  weight: real(\"weight\"),\n  photo: text(\"photo\"),\n  owner: text(\"owner\").notNull(),\n  notes: text(\"notes\"),\n  active: boolean(\"active\").default(true),\n  createdAt: text(\"created_at\"), // Almacenará fecha como texto para simplificar\n});\n\n// Esquema para inserción de mascotas\nexport const insertPetSchema = createInsertSchema(pets)\n  .omit({ id: true, createdAt: true })\n  .extend({\n    age: z.coerce.number().min(0).max(100).optional().nullable(),\n    weight: z.coerce.number().min(0).optional().nullable(),\n  });\n\nexport const petParamsSchema = z.object({\n  id: z.coerce.number(),\n});\n\n// Definición de tabla de clientes\nexport const clients = pgTable(\"clients\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  postalCode: text(\"postal_code\"),\n  notes: text(\"notes\"),\n  active: boolean(\"active\").default(true),\n  createdAt: text(\"created_at\"),\n});\n\n// Esquema para inserción de clientes\nexport const insertClientSchema = createInsertSchema(clients)\n  .omit({ id: true, createdAt: true })\n  .extend({\n    email: z.string().email(\"Email inválido\").optional().nullable(),\n    phone: z.string().optional().nullable(),\n  });\n\nexport const clientParamsSchema = z.object({\n  id: z.coerce.number(),\n});\n\n// Definición de tabla de productos\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  price: real(\"price\").notNull(),\n  stock: integer(\"stock\").default(0),\n  image: text(\"image\"),\n  sku: text(\"sku\"),\n  active: boolean(\"active\").default(true),\n  createdAt: text(\"created_at\"),\n});\n\n// Esquema para inserción de productos\nexport const insertProductSchema = createInsertSchema(products)\n  .omit({ id: true, createdAt: true })\n  .extend({\n    price: z.coerce.number().min(0, \"El precio debe ser mayor a 0\"),\n    stock: z.coerce.number().min(0, \"El stock no puede ser negativo\").default(0),\n  });\n\nexport const productParamsSchema = z.object({\n  id: z.coerce.number(),\n});\n\n// Definición de tabla de ventas\nexport const sales = pgTable(\"sales\", {\n  id: serial(\"id\").primaryKey(),\n  clientName: text(\"client_name\").notNull(),\n  total: real(\"total\").notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  status: text(\"status\").default(\"completed\"),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\"),\n});\n\n// Esquema para inserción de ventas\nexport const insertSaleSchema = createInsertSchema(sales)\n  .omit({ id: true, createdAt: true })\n  .extend({\n    total: z.coerce.number().min(0, \"El total debe ser mayor a 0\"),\n  });\n\nexport const saleParamsSchema = z.object({\n  id: z.coerce.number(),\n});\n\n// Definición de tabla de items de venta\nexport const saleItems = pgTable(\"sale_items\", {\n  id: serial(\"id\").primaryKey(),\n  saleId: integer(\"sale_id\").notNull(),\n  productName: text(\"product_name\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: real(\"unit_price\").notNull(),\n  subtotal: real(\"subtotal\").notNull(),\n});\n\n// Esquema para inserción de items de venta\nexport const insertSaleItemSchema = createInsertSchema(saleItems)\n  .omit({ id: true })\n  .extend({\n    quantity: z.coerce.number().positive(\"La cantidad debe ser mayor a 0\"),\n    unitPrice: z.coerce.number().min(0, \"El precio unitario debe ser mayor o igual a 0\"),\n    subtotal: z.coerce.number().min(0, \"El subtotal debe ser mayor o igual a 0\"),\n  });\n\nexport type Pet = typeof pets.$inferSelect;\nexport type InsertPet = z.infer<typeof insertPetSchema>;\nexport type PetParams = z.infer<typeof petParamsSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type ClientParams = z.infer<typeof clientParamsSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductParams = z.infer<typeof productParamsSchema>;\n\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type SaleParams = z.infer<typeof saleParamsSchema>;\n\nexport type SaleItem = typeof saleItems.$inferSelect;\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\n","size_bytes":5181},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Clients from \"@/pages/Clients\";\nimport Products from \"@/pages/Products\";\nimport Sales from \"@/pages/Sales\";\nimport Reports from \"@/pages/Reports\";\nimport Settings from \"@/pages/Settings\";\nimport Admin from \"@/pages/Admin\";\nimport WpcPage from \"@/pages/wpc\";\nimport WpcCategoryPage from \"@/pages/wpc/[categoryId]\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/clients\" component={Clients} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/sales\" component={Sales} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/wpc\" component={WpcPage} />\n      <Route path=\"/wpc/:categoryId\" component={WpcCategoryPage} />\n      {/* Fallback a 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1473},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 6%; /* #0F0F0F - Negro profundo */\n  --foreground: 45 85% 65%; /* #D4AF37 - Dorado */\n  --muted: 0 0% 15%; /* #262626 - Gris oscuro */\n  --muted-foreground: 45 20% 55%; /* #8B7D5B - Dorado apagado */\n  --popover: 0 0% 9%; /* #171717 - Negro suave */\n  --popover-foreground: 45 85% 65%; /* #D4AF37 - Dorado */\n  --card: 0 0% 9%; /* #171717 - Negro suave */\n  --card-foreground: 45 85% 65%; /* #D4AF37 - Dorado */\n  --border: 0 0% 20%; /* #333333 - Gris oscuro */\n  --input: 0 0% 20%; /* #333333 - Gris oscuro */\n  --primary: 45 85% 65%; /* #D4AF37 - Dorado */\n  --primary-foreground: 0 0% 6%; /* #0F0F0F - Negro */\n  --secondary: 45 30% 25%; /* #3A3520 - Dorado oscuro */\n  --secondary-foreground: 45 85% 65%; /* #D4AF37 - Dorado */\n  --accent: 45 30% 25%; /* #3A3520 - Dorado oscuro */\n  --accent-foreground: 45 85% 65%; /* #D4AF37 - Dorado */\n  --destructive: 0 62% 50%; /* #DC2626 - Rojo */\n  --destructive-foreground: 0 0% 98%; /* #FAFAFA - Blanco */\n  --warning: 40 100% 60%; /* #FFB72B - Naranja amarillento */\n  --warning-foreground: 0 0% 6%; /* #0F0F0F - Negro */\n  --ring: 45 85% 65%; /* #D4AF37 - Dorado */\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: 0 0% 3%; /* #080808 - Negro más profundo */\n  --foreground: 45 90% 70%; /* #E6C547 - Dorado más brillante */\n  --muted: 0 0% 12%; /* #1F1F1F - Gris muy oscuro */\n  --muted-foreground: 45 15% 50%; /* #7A7058 - Dorado muy apagado */\n  --popover: 0 0% 6%; /* #0F0F0F - Negro profundo */\n  --popover-foreground: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --card: 0 0% 6%; /* #0F0F0F - Negro profundo */\n  --card-foreground: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --border: 0 0% 18%; /* #2E2E2E - Gris oscuro */\n  --input: 0 0% 18%; /* #2E2E2E - Gris oscuro */\n  --primary: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --primary-foreground: 0 0% 3%; /* #080808 - Negro profundo */\n  --secondary: 45 25% 20%; /* #312B1A - Dorado muy oscuro */\n  --secondary-foreground: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --accent: 45 25% 20%; /* #312B1A - Dorado muy oscuro */\n  --accent-foreground: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --destructive: 0 70% 55%; /* #E53E3E - Rojo */\n  --destructive-foreground: 0 0% 98%; /* #FAFAFA - Blanco */\n  --warning: 40 95% 65%; /* #FFB84D - Naranja dorado */\n  --warning-foreground: 0 0% 3%; /* #080808 - Negro profundo */\n  --ring: 45 90% 70%; /* #E6C547 - Dorado brillante */\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  .animate-slide-in {\n    animation: slideIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateY(20px);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n}\n","size_bytes":3053},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useClients.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Client, InsertClient } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useClients() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estado para el manejo del modal de confirmación de eliminación\n  const [clientToDelete, setClientToDelete] = useState<Client | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  \n  // Obtener todos los clientes\n  const { \n    data: clients = [],\n    isLoading: isLoadingClients,\n    isError: isClientsError,\n    error: clientsError\n  } = useQuery({\n    queryKey: ['/api/clients'],\n  });\n  \n  // Crear un cliente\n  const createClientMutation = useMutation({\n    mutationFn: async (newClient: InsertClient) => {\n      const res = await apiRequest('POST', '/api/clients', newClient);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      toast({\n        title: \"Cliente agregado\",\n        description: \"El cliente ha sido registrado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo agregar el cliente: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Actualizar un cliente\n  const updateClientMutation = useMutation({\n    mutationFn: async ({ id, client }: { id: number, client: InsertClient }) => {\n      const res = await apiRequest('PUT', `/api/clients/${id}`, client);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      toast({\n        title: \"Cliente actualizado\",\n        description: \"El cliente ha sido actualizado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo actualizar el cliente: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Eliminar un cliente\n  const deleteClientMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest('DELETE', `/api/clients/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      toast({\n        title: \"Cliente eliminado\",\n        description: \"El cliente ha sido eliminado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo eliminar el cliente: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Función para confirmar la eliminación\n  const confirmDelete = (client: Client) => {\n    setClientToDelete(client);\n    setIsDeleteDialogOpen(true);\n  };\n  \n  // Función para cancelar la eliminación\n  const cancelDelete = () => {\n    setClientToDelete(null);\n    setIsDeleteDialogOpen(false);\n  };\n  \n  // Función para ejecutar la eliminación\n  const handleDelete = () => {\n    if (clientToDelete) {\n      deleteClientMutation.mutate(clientToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setClientToDelete(null);\n    }\n  };\n  \n  return {\n    // Datos\n    clients,\n    isLoadingClients,\n    isClientsError,\n    clientsError,\n    \n    // Mutaciones\n    createClient: createClientMutation.mutate,\n    updateClient: updateClientMutation.mutate,\n    isSubmitting: createClientMutation.isPending || updateClientMutation.isPending,\n    \n    // Manejo de eliminación\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    clientToDelete,\n    isDeletingClient: deleteClientMutation.isPending\n  };\n}","size_bytes":3809},"client/src/hooks/usePets.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Pet, InsertPet } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function usePets() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estado para el manejo del modal de confirmación de eliminación\n  const [petToDelete, setPetToDelete] = useState<Pet | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  \n  // Obtener todas las mascotas\n  const { \n    data: pets = [],\n    isLoading: isLoadingPets,\n    isError: isPetsError,\n    error: petsError\n  } = useQuery({\n    queryKey: ['/api/pets'],\n  });\n  \n  // Crear una mascota\n  const createPetMutation = useMutation({\n    mutationFn: async (newPet: InsertPet) => {\n      const res = await apiRequest('POST', '/api/pets', newPet);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pets'] });\n      toast({\n        title: \"Mascota agregada\",\n        description: \"La mascota ha sido registrada exitosamente.\",\n        variant: \"success\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo agregar la mascota: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Actualizar una mascota\n  const updatePetMutation = useMutation({\n    mutationFn: async ({ id, pet }: { id: number, pet: InsertPet }) => {\n      const res = await apiRequest('PUT', `/api/pets/${id}`, pet);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pets'] });\n      toast({\n        title: \"Mascota actualizada\",\n        description: \"La mascota ha sido actualizada exitosamente.\",\n        variant: \"success\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo actualizar la mascota: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Eliminar una mascota\n  const deletePetMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest('DELETE', `/api/pets/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pets'] });\n      toast({\n        title: \"Mascota eliminada\",\n        description: \"La mascota ha sido eliminada exitosamente.\",\n        variant: \"success\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo eliminar la mascota: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Función para confirmar la eliminación\n  const confirmDelete = (pet: Pet) => {\n    setPetToDelete(pet);\n    setIsDeleteDialogOpen(true);\n  };\n  \n  // Función para cancelar la eliminación\n  const cancelDelete = () => {\n    setPetToDelete(null);\n    setIsDeleteDialogOpen(false);\n  };\n  \n  // Función para ejecutar la eliminación\n  const handleDelete = () => {\n    if (petToDelete) {\n      deletePetMutation.mutate(petToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setPetToDelete(null);\n    }\n  };\n  \n  return {\n    // Datos\n    pets,\n    isLoadingPets,\n    isPetsError,\n    petsError,\n    \n    // Mutaciones\n    createPet: createPetMutation.mutate,\n    updatePet: updatePetMutation.mutate,\n    isSubmitting: createPetMutation.isPending || updatePetMutation.isPending,\n    \n    // Manejo de eliminación\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    petToDelete,\n    isDeletingPet: deletePetMutation.isPending\n  };\n}\n","size_bytes":3750},"client/src/hooks/useProducts.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Product, InsertProduct } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useProducts() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estado para el manejo del modal de confirmación de eliminación\n  const [productToDelete, setProductToDelete] = useState<Product | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  \n  // Obtener todos los productos\n  const { \n    data: products = [],\n    isLoading: isLoadingProducts,\n    isError: isProductsError,\n    error: productsError\n  } = useQuery({\n    queryKey: ['/api/products'],\n  });\n  \n  // Crear un producto\n  const createProductMutation = useMutation({\n    mutationFn: async (newProduct: InsertProduct) => {\n      const res = await apiRequest('POST', '/api/products', newProduct);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Producto agregado\",\n        description: \"El producto ha sido registrado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo agregar el producto: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Actualizar un producto\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, product }: { id: number, product: InsertProduct }) => {\n      const res = await apiRequest('PUT', `/api/products/${id}`, product);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Producto actualizado\",\n        description: \"El producto ha sido actualizado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo actualizar el producto: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Eliminar un producto\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest('DELETE', `/api/products/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Producto eliminado\",\n        description: \"El producto ha sido eliminado exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo eliminar el producto: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Función para confirmar la eliminación\n  const confirmDelete = (product: Product) => {\n    setProductToDelete(product);\n    setIsDeleteDialogOpen(true);\n  };\n  \n  // Función para cancelar la eliminación\n  const cancelDelete = () => {\n    setProductToDelete(null);\n    setIsDeleteDialogOpen(false);\n  };\n  \n  // Función para ejecutar la eliminación\n  const handleDelete = () => {\n    if (productToDelete) {\n      deleteProductMutation.mutate(productToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setProductToDelete(null);\n    }\n  };\n  \n  return {\n    // Datos\n    products,\n    isLoadingProducts,\n    isProductsError,\n    productsError,\n    \n    // Mutaciones\n    createProduct: createProductMutation.mutate,\n    updateProduct: updateProductMutation.mutate,\n    isSubmitting: createProductMutation.isPending || updateProductMutation.isPending,\n    \n    // Manejo de eliminación\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    productToDelete,\n    isDeletingProduct: deleteProductMutation.isPending\n  };\n}","size_bytes":3871},"client/src/hooks/useSales.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Sale, InsertSale, InsertSaleItem } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useSales() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Estado para el manejo del modal de confirmación de eliminación\n  const [saleToDelete, setSaleToDelete] = useState<Sale | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  \n  // Obtener todas las ventas\n  const { \n    data: sales = [],\n    isLoading: isLoadingSales,\n    isError: isSalesError,\n    error: salesError\n  } = useQuery({\n    queryKey: ['/api/sales'],\n  });\n  \n  // Crear una venta con sus items\n  const createSaleMutation = useMutation({\n    mutationFn: async ({ sale, items }: { sale: InsertSale, items: InsertSaleItem[] }) => {\n      const res = await apiRequest('POST', '/api/sales', { sale, items });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sales'] });\n      toast({\n        title: \"Venta registrada\",\n        description: \"La venta ha sido registrada exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo registrar la venta: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Eliminar una venta\n  const deleteSaleMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const res = await apiRequest('DELETE', `/api/sales/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sales'] });\n      toast({\n        title: \"Venta eliminada\",\n        description: \"La venta ha sido eliminada exitosamente.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: `No se pudo eliminar la venta: ${error.message}`,\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  // Obtener una venta específica con sus items\n  const getSale = (id: number) => {\n    return useQuery({\n      queryKey: [`/api/sales/${id}`],\n      queryFn: async () => {\n        const res = await apiRequest('GET', `/api/sales/${id}`);\n        return res.json();\n      },\n    });\n  };\n  \n  // Función para confirmar la eliminación\n  const confirmDelete = (sale: Sale) => {\n    setSaleToDelete(sale);\n    setIsDeleteDialogOpen(true);\n  };\n  \n  // Función para cancelar la eliminación\n  const cancelDelete = () => {\n    setSaleToDelete(null);\n    setIsDeleteDialogOpen(false);\n  };\n  \n  // Función para ejecutar la eliminación\n  const handleDelete = () => {\n    if (saleToDelete) {\n      deleteSaleMutation.mutate(saleToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setSaleToDelete(null);\n    }\n  };\n  \n  return {\n    // Datos\n    sales,\n    isLoadingSales,\n    isSalesError,\n    salesError,\n    \n    // Mutaciones\n    createSale: createSaleMutation.mutate,\n    isSubmitting: createSaleMutation.isPending,\n    \n    // Obtener una venta específica\n    getSale,\n    \n    // Manejo de eliminación\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    saleToDelete,\n    isDeletingSale: deleteSaleMutation.isPending\n  };\n}","size_bytes":3375},"client/src/lib/constants.ts":{"content":"import { \n  Home, \n  Users, \n  ShoppingCart, \n  Package, \n  BarChart2, \n  Settings,\n  ShieldCheck,\n  Grid3X3,\n  Building,\n  Layers\n} from \"lucide-react\";\n\nexport const SIDEBAR_LINKS = [\n  { icon: Home, label: 'Inicio', href: '/' },\n  { icon: Grid3X3, label: 'Catálogo WPC', href: '/wpc' },\n  { icon: Users, label: 'Clientes', href: '/clients' },\n  { icon: ShoppingCart, label: 'Ventas', href: '/sales' },\n  { icon: Package, label: 'Inventario', href: '/products' },\n  { icon: BarChart2, label: 'Informes', href: '/reports' },\n  { icon: Settings, label: 'Configuración', href: '/settings' },\n  { icon: ShieldCheck, label: 'Administración', href: '/admin' },\n];\n\nexport const DEFAULT_AVATAR = 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=40&h=40';\n\nexport const DEFAULT_PET_PHOTO = 'https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg';\n","size_bytes":981},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/types.ts":{"content":"export type ViewMode = 'list' | 'form';\n\nexport interface PetOwner {\n  id: string;\n  name: string;\n}\n\nexport const SPECIES_OPTIONS = [\n  { value: 'Perro', label: 'Perro' },\n  { value: 'Gato', label: 'Gato' },\n  { value: 'Ave', label: 'Ave' },\n  { value: 'Pez', label: 'Pez' },\n  { value: 'Roedor', label: 'Roedor' },\n  { value: 'Reptil', label: 'Reptil' },\n  { value: 'Otro', label: 'Otro' },\n];\n\nexport const AGE_UNIT_OPTIONS = [\n  { value: 'years', label: 'Años' },\n  { value: 'months', label: 'Meses' },\n];\n\nexport const PET_OWNERS: PetOwner[] = [\n  { id: '1', name: 'Carlos Ramírez' },\n  { id: '2', name: 'María González' },\n  { id: '3', name: 'Ana Martínez' },\n  { id: '4', name: 'Juan Rodríguez' },\n  { id: '5', name: 'Laura Díaz' },\n];\n","size_bytes":750},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/wpc-data.ts":{"content":"// Datos para las categorías de WPC\nexport const wpcCategories = [\n  {\n    id: 'interior',\n    title: 'WPC Interior',\n    description: 'Soluciones de madera compuesta para interiores resistentes y estéticos.',\n    imageSrc: 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&q=80',\n    heroImage: 'https://images.unsplash.com/photo-1582582621959-48d27397dc69?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80',\n    shortDescription: 'Paneles y revestimientos de WPC para espacios interiores de alta durabilidad y bajo mantenimiento.',\n    longDescription: 'Los productos WPC para interior ofrecen soluciones innovadoras que combinan la calidez visual de la madera con la durabilidad y resistencia del plástico. Ideales para suelos, revestimientos y elementos decorativos en espacios con alto tránsito o exposición a humedad.',\n    benefits: [\n      'Resistente a manchas y humedad',\n      'Fácil instalación y mantenimiento',\n      'Apariencia natural de madera',\n      'No se deforma ni agrieta',\n      'Opciones ecológicas disponibles'\n    ]\n  },\n  {\n    id: 'exterior',\n    title: 'WPC Exterior',\n    description: 'Materiales de WPC para exteriores con resistencia a la intemperie y durabilidad superior.',\n    imageSrc: 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&q=80',\n    heroImage: 'https://images.unsplash.com/photo-1513584684374-8bab748fbf90?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80',\n    shortDescription: 'Soluciones de WPC para terrazas, fachadas y espacios exteriores con alta durabilidad y resistencia a condiciones climáticas extremas.',\n    longDescription: 'Nuestros productos WPC para exterior están diseñados para resistir condiciones climáticas adversas, rayos UV, humedad y cambios de temperatura mientras mantienen su apariencia estética. Perfectos para terrazas, pérgolas, cercas y revestimientos de fachadas.',\n    benefits: [\n      'Resistente a rayos UV y decoloración',\n      'No requiere barnizado ni pintura',\n      'Resistente al agua y humedad',\n      'No se pudre ni es atacado por insectos',\n      'Bajo mantenimiento y larga vida útil'\n    ]\n  },\n  {\n    id: 'accesorios',\n    title: 'Accesorios WPC',\n    description: 'Complementos y accesorios para instalaciones de WPC interior y exterior.',\n    imageSrc: 'https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&q=80',\n    heroImage: 'https://images.unsplash.com/photo-1567538096630-e0c55bd6374c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80',\n    shortDescription: 'Elementos complementarios para instalaciones de WPC que aseguran acabados perfectos y mayor durabilidad.',\n    longDescription: 'Nuestra línea de accesorios WPC incluye todos los elementos necesarios para asegurar instalaciones profesionales y acabados perfectos. Desde clips de fijación hasta perfiles de terminación, estos accesorios están diseñados específicamente para complementar nuestros productos de WPC.',\n    benefits: [\n      'Perfecta compatibilidad con productos WPC',\n      'Fácil instalación y ajuste',\n      'Mayor durabilidad de las instalaciones',\n      'Acabados profesionales',\n      'Soluciones para cada tipo de proyecto'\n    ]\n  }\n];\n\n// Datos para productos de WPC por categoría\nexport const wpcProducts = {\n  interior: [\n    {\n      id: 'panel-decorativo',\n      title: 'Panel Decorativo WPC',\n      description: 'Paneles decorativos para paredes interiores con diseños modernos',\n      imageSrc: 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1582582621959-48d27397dc69?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1631889993959-41b4e9c6e3c5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Resistente al agua', 'Ignífugo', 'Fácil instalación', 'Aislante acústico'],\n      applications: ['Salas', 'Restaurantes', 'Oficinas', 'Comercios'],\n      specifications: {\n        dimensions: '2.4m x 0.2m x 9mm',\n        material: 'WPC (60% madera, 40% polímero)',\n        weight: '7.2 kg/m²',\n        colors: ['Roble natural', 'Nogal', 'Wengue', 'Blanco vintage']\n      },\n      details: 'Los paneles decorativos WPC son una solución moderna para revestimientos de paredes interiores. Con una apariencia natural de madera pero con las ventajas del compuesto plástico, estos paneles son ideales para crear ambientes cálidos y estéticos sin los problemas de mantenimiento de la madera tradicional.'\n    },\n    {\n      id: 'suelo-interior',\n      title: 'Suelo WPC Interior',\n      description: 'Suelos laminados de WPC para áreas interiores con alto tránsito',\n      imageSrc: 'https://images.unsplash.com/photo-1631889993959-41b4e9c6e3c5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1560185893-a55cbc8c57e8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Antideslizante', 'Resistente a impactos', 'Antibacteriano', 'Sistema click'],\n      applications: ['Viviendas', 'Hoteles', 'Centros comerciales', 'Gimnasios'],\n      specifications: {\n        dimensions: '1.2m x 0.15m x 8mm',\n        material: 'WPC de alta densidad',\n        weight: '8.5 kg/m²',\n        colors: ['Arce', 'Cerezo', 'Gris vintage', 'Caoba']\n      },\n      details: 'El suelo de WPC para interiores combina la belleza de la madera natural con la durabilidad del plástico. Su sistema de instalación click lo hace fácil de instalar y su estructura resistente al agua lo hace ideal para cualquier espacio interior, incluso en zonas húmedas como baños o cocinas.'\n    },\n    {\n      id: 'zocalo-wpc',\n      title: 'Zócalos y Molduras WPC',\n      description: 'Acabados perfectos para instalaciones de suelos y paredes',\n      imageSrc: 'https://images.unsplash.com/photo-1560185893-a55cbc8c57e8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1582582621959-48d27397dc69?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1631889993959-41b4e9c6e3c5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Resistente a golpes', 'Impermeable', 'No necesita pintura', 'Fácil limpieza'],\n      applications: ['Complemento para suelos', 'Transiciones', 'Escaleras', 'Acabados'],\n      specifications: {\n        dimensions: 'Varias según modelo',\n        material: 'WPC moldeado',\n        weight: '1.2 kg/m',\n        colors: ['Combinables con suelos']\n      },\n      details: 'Las molduras y zócalos de WPC proporcionan el acabado perfecto para sus instalaciones de suelo. Fabricados con el mismo material que nuestros suelos, garantizan una perfecta combinación estética y las mismas ventajas de durabilidad y resistencia al agua.'\n    }\n  ],\n  exterior: [\n    {\n      id: 'deck-exterior',\n      title: 'Deck WPC Exterior',\n      description: 'Tarima para exteriores resistente a la intemperie y UV',\n      imageSrc: 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1513584684374-8bab748fbf90?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Antideslizante', 'Resistente a UV', 'No se astilla', 'Bajo mantenimiento'],\n      applications: ['Terrazas', 'Piscinas', 'Jardines', 'Pasarelas'],\n      specifications: {\n        dimensions: '2.2m x 0.14m x 22mm',\n        material: 'WPC con protección UV',\n        weight: '19.5 kg/m²',\n        colors: ['Teka', 'Gris', 'Chocolate', 'Arena']\n      },\n      details: 'Nuestro deck de WPC para exteriores está diseñado para resistir las condiciones climáticas más adversas. Resistente a rayos UV, lluvias, nieve y cambios de temperatura, este producto mantiene su aspecto y funcionalidad durante años con un mínimo mantenimiento. Su superficie antideslizante lo hace seguro incluso en condiciones húmedas.'\n    },\n    {\n      id: 'fachada-wpc',\n      title: 'Revestimiento Fachada WPC',\n      description: 'Sistema de revestimiento para fachadas de edificios',\n      imageSrc: 'https://images.unsplash.com/photo-1513584684374-8bab748fbf90?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Alta durabilidad', 'Resistente al fuego', 'Aislante térmico', 'Ventilado'],\n      applications: ['Fachadas', 'Cerramientos', 'Espacios comerciales', 'Edificios'],\n      specifications: {\n        dimensions: '3m x 0.15m x 12mm',\n        material: 'WPC reforzado',\n        weight: '9.8 kg/m²',\n        colors: ['Madera natural', 'Carbon', 'Terracota', 'Silver']\n      },\n      details: 'El sistema de fachada ventilada WPC ofrece una solución duradera y estética para el revestimiento de edificios. Proporciona aislamiento térmico adicional, protección contra la intemperie y una apariencia moderna. Su sistema de instalación permite la ventilación adecuada, evitando problemas de humedad.'\n    },\n    {\n      id: 'pergola-wpc',\n      title: 'Pérgolas y Celosías WPC',\n      description: 'Estructuras decorativas para jardines y espacios exteriores',\n      imageSrc: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1513584684374-8bab748fbf90?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Resistente al viento', 'No requiere pintura', 'Fácil montaje', 'Personalizable'],\n      applications: ['Jardines', 'Patios', 'Separadores', 'Porches'],\n      specifications: {\n        dimensions: 'Personalizables según proyecto',\n        material: 'WPC estructural',\n        weight: 'Variable según diseño',\n        colors: ['Marrón oscuro', 'Gris claro', 'Vintage']\n      },\n      details: 'Nuestras pérgolas y celosías de WPC añaden un toque decorativo a cualquier espacio exterior mientras proporcionan sombra y privacidad. Fabricadas con WPC estructural, ofrecen la apariencia natural de la madera pero con una durabilidad muy superior y sin necesidad de mantenimiento regular como barnizado o protección.'\n    }\n  ],\n  accesorios: [\n    {\n      id: 'clips-fijacion',\n      title: 'Clips de Fijación',\n      description: 'Sistema de fijación invisible para instalación de tarimas',\n      imageSrc: 'https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1567538096630-e0c55bd6374c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1530587191325-3db32d826c18?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Invisible', 'Acero inoxidable', 'Fácil instalación', 'Durable'],\n      applications: ['Instalación de deck', 'Tarimas', 'Exterior e interior'],\n      specifications: {\n        dimensions: '27mm x 11mm x 9mm',\n        material: 'Acero inoxidable y plástico reforzado',\n        incluye: '50 clips, 50 tornillos y llave allen',\n        compatibilidad: 'Universal para tarimas WPC'\n      },\n      details: 'Los clips de fijación invisible permiten instalar tarimas WPC sin tornillos visibles, logrando un acabado estético perfecto. Fabricados en acero inoxidable, resisten la corrosión incluso en ambientes húmedos o salinos. Su diseño facilita la instalación y permite la expansión natural del material.'\n    },\n    {\n      id: 'perfiles-terminacion',\n      title: 'Perfiles de Terminación',\n      description: 'Soluciones para remates y acabados de instalaciones WPC',\n      imageSrc: 'https://images.unsplash.com/photo-1567538096630-e0c55bd6374c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1530587191325-3db32d826c18?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80', 'https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Versatilidad', 'Fácil corte', 'Diseño a juego', 'Resistente'],\n      applications: ['Bordes de terraza', 'Escalones', 'Cambios de nivel', 'Remates'],\n      specifications: {\n        dimensions: '2.2m x 6cm x 1cm',\n        material: 'WPC',\n        peso: '1.8 kg/m',\n        colores: 'Combinables con productos WPC'\n      },\n      details: 'Los perfiles de terminación son indispensables para lograr acabados profesionales en instalaciones de WPC. Disponibles en varios diseños (recto, en L, de escalón), estos perfiles garantizan un resultado estético y funcional, cubriendo bordes y proporcionando transiciones suaves entre diferentes superficies.'\n    },\n    {\n      id: 'tornilleria-especial',\n      title: 'Tornillería Especial WPC',\n      description: 'Tornillos y fijaciones específicas para instalaciones WPC',\n      imageSrc: 'https://images.unsplash.com/photo-1530587191325-3db32d826c18?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80',\n      detailImages: ['https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80'],\n      features: ['Anticorrosión', 'Autorroscantes', 'Cabeza avellanada', 'Alta resistencia'],\n      applications: ['Fijación directa', 'Subestructuras', 'Instalaciones interiores y exteriores'],\n      specifications: {\n        dimensiones: 'Varios tamaños disponibles',\n        material: 'Acero inoxidable A2',\n        incluye: 'Puntas de atornillador compatibles',\n        acabado: 'Disponibles en varios colores para combinar'\n      },\n      details: 'Nuestra tornillería especializada para WPC está diseñada para proporcionar una fijación segura sin dañar el material. Los tornillos autorroscantes con paso específico previenen agrietamientos y garantizan una sujeción duradera. Disponibles en diferentes acabados para mimetizarse con el color de la instalación.'\n    }\n  ]\n};","size_bytes":16381},"client/src/pages/Admin.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AlertCircle, UserPlus, Edit, Trash2, ShieldAlert, Search } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n  status: string;\n  lastLogin: string;\n}\n\ninterface ActivityLog {\n  id: number;\n  user: string;\n  action: string;\n  resource: string;\n  timestamp: string;\n  ip: string;\n}\n\nexport default function Admin() {\n  // Estado para usuarios y registro de actividad\n  const [users, setUsers] = useState<User[]>([\n    { id: 1, username: \"admin\", email: \"admin@tiendamascotas.com\", role: \"Administrador\", status: \"Activo\", lastLogin: \"2023-05-22 10:30\" },\n    { id: 2, username: \"vendedor1\", email: \"vendedor@tiendamascotas.com\", role: \"Vendedor\", status: \"Activo\", lastLogin: \"2023-05-23 09:15\" },\n    { id: 3, username: \"almacen\", email: \"almacen@tiendamascotas.com\", role: \"Inventario\", status: \"Inactivo\", lastLogin: \"2023-05-15 16:45\" },\n  ]);\n\n  const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([\n    { id: 1, user: \"admin\", action: \"Inicio de sesión\", resource: \"Sistema\", timestamp: \"2023-05-23 10:30:15\", ip: \"192.168.1.100\" },\n    { id: 2, user: \"vendedor1\", action: \"Creación\", resource: \"Venta #1045\", timestamp: \"2023-05-23 09:45:30\", ip: \"192.168.1.101\" },\n    { id: 3, user: \"admin\", action: \"Actualización\", resource: \"Producto #23\", timestamp: \"2023-05-23 11:15:00\", ip: \"192.168.1.100\" },\n    { id: 4, user: \"almacen\", action: \"Eliminación\", resource: \"Producto #15\", timestamp: \"2023-05-22 15:20:10\", ip: \"192.168.1.102\" },\n    { id: 5, user: \"vendedor1\", action: \"Actualización\", resource: \"Cliente #42\", timestamp: \"2023-05-23 10:05:45\", ip: \"192.168.1.101\" },\n  ]);\n\n  const [showUserForm, setShowUserForm] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Estado para formulario de usuario\n  const [userForm, setUserForm] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    role: \"Vendedor\"\n  });\n\n  // Valores para el formulario\n  const availableRoles = [\"Administrador\", \"Vendedor\", \"Inventario\", \"Contabilidad\", \"Soporte\"];\n\n  // Manejar cambios en el formulario\n  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserForm({\n      ...userForm,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Manejar cambio de rol\n  const handleRoleChange = (value: string) => {\n    setUserForm({\n      ...userForm,\n      role: value\n    });\n  };\n\n  // Manejar envío de formulario\n  const handleUserSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (userForm.password !== userForm.confirmPassword) {\n      toast({\n        title: \"Error de validación\",\n        description: \"Las contraseñas no coinciden\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (editingUser) {\n      // Actualizar usuario existente\n      const updatedUsers = users.map(user => \n        user.id === editingUser.id ? \n        { ...user, username: userForm.username, email: userForm.email, role: userForm.role } : \n        user\n      );\n      setUsers(updatedUsers);\n      toast({\n        title: \"Usuario actualizado\",\n        description: `El usuario ${userForm.username} ha sido actualizado correctamente.`\n      });\n    } else {\n      // Crear nuevo usuario\n      const newUser: User = {\n        id: users.length + 1,\n        username: userForm.username,\n        email: userForm.email,\n        role: userForm.role,\n        status: \"Activo\",\n        lastLogin: \"Nunca\"\n      };\n      \n      setUsers([...users, newUser]);\n      toast({\n        title: \"Usuario creado\",\n        description: `El usuario ${userForm.username} ha sido creado correctamente.`\n      });\n    }\n    \n    // Resetear formulario y estado\n    setUserForm({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: \"Vendedor\"\n    });\n    setShowUserForm(false);\n    setEditingUser(null);\n  };\n\n  // Editar usuario\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setUserForm({\n      username: user.username,\n      email: user.email,\n      password: \"\",\n      confirmPassword: \"\",\n      role: user.role\n    });\n    setShowUserForm(true);\n  };\n\n  // Eliminar usuario\n  const handleDeleteUser = (userId: number) => {\n    // En un caso real, aquí se haría una confirmación antes de eliminar\n    const updatedUsers = users.filter(user => user.id !== userId);\n    setUsers(updatedUsers);\n    toast({\n      title: \"Usuario eliminado\",\n      description: \"El usuario ha sido eliminado correctamente.\"\n    });\n  };\n\n  // Cambiar estado de usuario\n  const handleToggleUserStatus = (userId: number) => {\n    const updatedUsers = users.map(user => \n      user.id === userId ? \n      { ...user, status: user.status === \"Activo\" ? \"Inactivo\" : \"Activo\" } : \n      user\n    );\n    setUsers(updatedUsers);\n    \n    const targetUser = updatedUsers.find(user => user.id === userId);\n    toast({\n      title: \"Estado actualizado\",\n      description: `El usuario ${targetUser?.username} ahora está ${targetUser?.status}.`\n    });\n  };\n\n  // Filtrar usuarios por búsqueda\n  const filteredUsers = users.filter(user => \n    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.role.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Filtrar logs por búsqueda\n  const filteredLogs = activityLogs.filter(log => \n    log.user.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    log.resource.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <MainLayout title=\"Administración\">\n      <div className=\"animate-fade-in space-y-4\">\n        <h1 className=\"text-2xl font-bold text-primary\">Panel de Administración</h1>\n        <p className=\"text-muted-foreground mb-6\">\n          Gestiona usuarios, permisos y supervisa la actividad del sistema.\n        </p>\n        \n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"relative w-64\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Buscar...\"\n              className=\"pl-8\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          {!showUserForm && (\n            <Button onClick={() => {setShowUserForm(true); setEditingUser(null);}}>\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Nuevo Usuario\n            </Button>\n          )}\n        </div>\n        \n        {/* Alerta para permisos */}\n        <Alert variant=\"default\" className=\"bg-muted mb-4\">\n          <ShieldAlert className=\"h-4 w-4\" />\n          <AlertTitle>Sección restringida</AlertTitle>\n          <AlertDescription>\n            Esta sección está restringida a usuarios con permisos administrativos.\n            Algunos cambios requieren privilegios elevados.\n          </AlertDescription>\n        </Alert>\n        \n        <Tabs defaultValue=\"users\" className=\"w-full\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"users\">Usuarios</TabsTrigger>\n            <TabsTrigger value=\"activity\">Registro de Actividad</TabsTrigger>\n            <TabsTrigger value=\"permissions\">Permisos</TabsTrigger>\n          </TabsList>\n          \n          {/* Pestaña de Usuarios */}\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            {showUserForm ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle>{editingUser ? \"Editar Usuario\" : \"Nuevo Usuario\"}</CardTitle>\n                  <CardDescription>\n                    {editingUser \n                      ? \"Modifica la información del usuario existente\" \n                      : \"Ingresa la información para crear un nuevo usuario\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleUserSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"username\">Nombre de Usuario</Label>\n                        <Input\n                          id=\"username\"\n                          name=\"username\"\n                          value={userForm.username}\n                          onChange={handleFormChange}\n                          required\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Correo Electrónico</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          value={userForm.email}\n                          onChange={handleFormChange}\n                          required\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">Contraseña</Label>\n                        <Input\n                          id=\"password\"\n                          name=\"password\"\n                          type=\"password\"\n                          value={userForm.password}\n                          onChange={handleFormChange}\n                          required={!editingUser}\n                          placeholder={editingUser ? \"Dejar en blanco para mantener\" : \"\"}\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"confirmPassword\">Confirmar Contraseña</Label>\n                        <Input\n                          id=\"confirmPassword\"\n                          name=\"confirmPassword\"\n                          type=\"password\"\n                          value={userForm.confirmPassword}\n                          onChange={handleFormChange}\n                          required={!editingUser}\n                          placeholder={editingUser ? \"Dejar en blanco para mantener\" : \"\"}\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"role\">Rol</Label>\n                        <Select \n                          value={userForm.role}\n                          onValueChange={handleRoleChange}\n                        >\n                          <SelectTrigger id=\"role\">\n                            <SelectValue placeholder=\"Seleccione un rol\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {availableRoles.map(role => (\n                              <SelectItem key={role} value={role}>{role}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2 pt-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setShowUserForm(false);\n                          setEditingUser(null);\n                        }}\n                      >\n                        Cancelar\n                      </Button>\n                      <Button type=\"submit\">\n                        {editingUser ? \"Actualizar Usuario\" : \"Crear Usuario\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Gestión de Usuarios</CardTitle>\n                  <CardDescription>\n                    Lista de usuarios registrados en el sistema\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Usuario</TableHead>\n                          <TableHead>Correo Electrónico</TableHead>\n                          <TableHead>Rol</TableHead>\n                          <TableHead>Estado</TableHead>\n                          <TableHead>Último Acceso</TableHead>\n                          <TableHead>Acciones</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredUsers.length === 0 ? (\n                          <TableRow>\n                            <TableCell colSpan={6} className=\"text-center py-4\">\n                              No se encontraron usuarios con los criterios de búsqueda\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          filteredUsers.map(user => (\n                            <TableRow key={user.id}>\n                              <TableCell className=\"font-medium\">{user.username}</TableCell>\n                              <TableCell>{user.email}</TableCell>\n                              <TableCell>{user.role}</TableCell>\n                              <TableCell>\n                                <Badge variant={user.status === \"Activo\" ? \"default\" : \"outline\"}>\n                                  {user.status}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>{user.lastLogin}</TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEditUser(user)}\n                                  >\n                                    <Edit className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleToggleUserStatus(user.id)}\n                                  >\n                                    <Switch checked={user.status === \"Activo\"} />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleDeleteUser(user.id)}\n                                    disabled={user.username === \"admin\"}\n                                  >\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n          \n          {/* Pestaña de Registro de Actividad */}\n          <TabsContent value=\"activity\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Registro de Actividad</CardTitle>\n                <CardDescription>\n                  Historial de acciones realizadas por los usuarios en el sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Timestamp</TableHead>\n                        <TableHead>Usuario</TableHead>\n                        <TableHead>Acción</TableHead>\n                        <TableHead>Recurso</TableHead>\n                        <TableHead>Dirección IP</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredLogs.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center py-4\">\n                            No se encontraron registros con los criterios de búsqueda\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        filteredLogs.map(log => (\n                          <TableRow key={log.id}>\n                            <TableCell className=\"whitespace-nowrap\">{log.timestamp}</TableCell>\n                            <TableCell>{log.user}</TableCell>\n                            <TableCell>\n                              <Badge variant={\n                                log.action === \"Eliminación\" ? \"destructive\" :\n                                log.action === \"Actualización\" ? \"secondary\" :\n                                log.action === \"Creación\" ? \"default\" : \"outline\"\n                              }>\n                                {log.action}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{log.resource}</TableCell>\n                            <TableCell>{log.ip}</TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-end\">\n                <Button variant=\"outline\">Exportar Registro</Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n          \n          {/* Pestaña de Permisos */}\n          <TabsContent value=\"permissions\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gestión de Permisos</CardTitle>\n                <CardDescription>\n                  Configuración de permisos por rol\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Administrador</h3>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"admin-users\" defaultChecked disabled />\n                        <Label htmlFor=\"admin-users\">Gestión de Usuarios</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"admin-config\" defaultChecked disabled />\n                        <Label htmlFor=\"admin-config\">Configuración del Sistema</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"admin-reports\" defaultChecked disabled />\n                        <Label htmlFor=\"admin-reports\">Informes Avanzados</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"admin-logs\" defaultChecked disabled />\n                        <Label htmlFor=\"admin-logs\">Ver Registros</Label>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Vendedor</h3>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"seller-sales\" defaultChecked />\n                        <Label htmlFor=\"seller-sales\">Gestión de Ventas</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"seller-clients\" defaultChecked />\n                        <Label htmlFor=\"seller-clients\">Gestión de Clientes</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"seller-products\" defaultChecked />\n                        <Label htmlFor=\"seller-products\">Ver Productos</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"seller-reports\" />\n                        <Label htmlFor=\"seller-reports\">Informes Básicos</Label>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Inventario</h3>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"inv-products\" defaultChecked />\n                        <Label htmlFor=\"inv-products\">Gestión de Productos</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"inv-stock\" defaultChecked />\n                        <Label htmlFor=\"inv-stock\">Control de Stock</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"inv-pets\" />\n                        <Label htmlFor=\"inv-pets\">Gestión de Mascotas</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch id=\"inv-reports\" />\n                        <Label htmlFor=\"inv-reports\">Informes de Inventario</Label>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\">Restablecer Valores</Button>\n                <Button onClick={() => {\n                  toast({\n                    title: \"Permisos guardados\",\n                    description: \"Los permisos han sido actualizados correctamente.\"\n                  });\n                }}>\n                  Guardar Cambios\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":23861},"client/src/pages/Clients.tsx":{"content":"import { useState } from \"react\";\nimport { ClientTable } from \"@/components/clients/ClientTable\";\nimport { ClientForm } from \"@/components/clients/ClientForm\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/DeleteConfirmationDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Plus } from \"lucide-react\";\nimport { useClients } from \"@/hooks/useClients\";\nimport { Client, InsertClient } from \"@shared/schema\";\nimport { ViewMode } from \"@/lib/types\";\n\nexport default function Clients() {\n  // Estado local para controlar la vista actual y el cliente en edición\n  const [viewMode, setViewMode] = useState<ViewMode>(\"list\");\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n  \n  // Obtener las funciones y datos del hook personalizado\n  const { \n    clients, \n    isLoadingClients,\n    createClient, \n    updateClient, \n    isSubmitting,\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    clientToDelete\n  } = useClients();\n  \n  // Cambiar a vista de formulario para agregar\n  const handleAddNew = () => {\n    setEditingClient(null);\n    setViewMode(\"form\");\n  };\n  \n  // Cambiar a vista de formulario para editar\n  const handleEdit = (client: Client) => {\n    setEditingClient(client);\n    setViewMode(\"form\");\n  };\n  \n  // Volver a la vista de lista\n  const handleCancel = () => {\n    setViewMode(\"list\");\n    setEditingClient(null);\n  };\n  \n  // Manejar el envío del formulario\n  const handleSubmit = (data: InsertClient) => {\n    if (editingClient) {\n      // Actualizar cliente existente\n      updateClient({ id: editingClient.id, client: data });\n    } else {\n      // Crear nuevo cliente\n      createClient(data);\n    }\n    \n    // Volver a la vista de lista después de enviar\n    setViewMode(\"list\");\n    setEditingClient(null);\n  };\n  \n  return (\n    <MainLayout title=\"Gestión de Clientes\">\n      {viewMode === \"list\" ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl font-bold tracking-tight\">Clientes</h1>\n              <p className=\"text-muted-foreground\">\n                Administra el registro de clientes en el sistema.\n              </p>\n            </div>\n            <Button \n              onClick={handleAddNew}\n              className=\"bg-accent hover:bg-green-700 text-white\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" /> Agregar Cliente\n            </Button>\n          </div>\n          \n          <ClientTable \n            clients={clients}\n            onEdit={handleEdit}\n            onDelete={confirmDelete}\n            isLoading={isLoadingClients}\n          />\n          \n          <DeleteConfirmationDialog\n            isOpen={isDeleteDialogOpen}\n            onClose={cancelDelete}\n            onConfirm={handleDelete}\n            title=\"Confirmar Eliminación\"\n            description={\n              clientToDelete \n                ? `¿Está seguro que desea eliminar a ${clientToDelete.name}? Esta acción no se puede deshacer.`\n                : \"¿Está seguro que desea eliminar este cliente? Esta acción no se puede deshacer.\"\n            }\n          />\n        </div>\n      ) : (\n        <ClientForm\n          initialData={editingClient || undefined}\n          onSubmit={handleSubmit}\n          onCancel={handleCancel}\n          isSubmitting={isSubmitting}\n        />\n      )}\n    </MainLayout>\n  );\n}","size_bytes":3507},"client/src/pages/Home.tsx":{"content":"import { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Grid3X3, Users, Package, ShoppingCart, Building, Layers, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  return (\n    <MainLayout title=\"Panel Principal\">\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-primary mb-4\">WPC Solutions Admin</h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Sistema de gestión integral para productos de madera compuesta (WPC). \n            Administra catálogo, clientes, inventario y ventas de manera profesional.\n          </p>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h2 className=\"text-2xl font-semibold text-primary mb-4\">Wood Plastic Composite</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            Soluciones innovadoras en madera compuesta que combinan la belleza natural de la madera \n            con la durabilidad del plástico. Productos ideales para aplicaciones de interior y exterior \n            con mínimo mantenimiento y máxima resistencia.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n              <span className=\"text-sm\">Resistente a humedad y UV</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n              <span className=\"text-sm\">Bajo mantenimiento</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n              <span className=\"text-sm\">Ecológicamente responsable</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Link href=\"/wpc\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all hover:scale-105\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Catálogo WPC</CardTitle>\n                <Grid3X3 className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">Explorar Productos</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Interior, exterior y accesorios WPC\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/clients\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all hover:scale-105\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Clientes</CardTitle>\n                <Users className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">Gestionar Clientes</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Administra tu cartera de clientes\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/products\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all hover:scale-105\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Inventario</CardTitle>\n                <Package className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">Control Stock</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Gestiona inventario de productos WPC\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/sales\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all hover:scale-105\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Ventas</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">Gestionar Ventas</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Registra y analiza tus ventas\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <Link href=\"/reports\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Informes y Análisis</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-xl font-bold\">Reportes de Negocio</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Estadísticas de ventas y rendimiento\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/admin\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-all\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-primary\">Administración</CardTitle>\n                <Building className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-xl font-bold\">Panel Admin</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Configuración y gestión de usuarios\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n","size_bytes":6570},"client/src/pages/Pets.tsx":{"content":"import { useState } from \"react\";\nimport { PetTable } from \"@/components/pets/PetTable\";\nimport { PetForm } from \"@/components/pets/PetForm\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/DeleteConfirmationDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Plus } from \"lucide-react\";\nimport { usePets } from \"@/hooks/usePets\";\nimport { Pet, InsertPet } from \"@shared/schema\";\nimport { ViewMode } from \"@/lib/types\";\n\nexport default function Pets() {\n  // Estado local para controlar la vista actual y la mascota en edición\n  const [viewMode, setViewMode] = useState<ViewMode>(\"list\");\n  const [editingPet, setEditingPet] = useState<Pet | null>(null);\n  \n  // Obtener las funciones y datos del hook personalizado\n  const { \n    pets, \n    isLoadingPets,\n    createPet, \n    updatePet, \n    isSubmitting,\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    petToDelete\n  } = usePets();\n  \n  // Cambiar a vista de formulario para agregar\n  const handleAddNew = () => {\n    setEditingPet(null);\n    setViewMode(\"form\");\n  };\n  \n  // Cambiar a vista de formulario para editar\n  const handleEdit = (pet: Pet) => {\n    setEditingPet(pet);\n    setViewMode(\"form\");\n  };\n  \n  // Volver a la vista de lista\n  const handleCancel = () => {\n    setViewMode(\"list\");\n    setEditingPet(null);\n  };\n  \n  // Manejar el envío del formulario\n  const handleSubmit = (data: InsertPet) => {\n    if (editingPet) {\n      // Actualizar mascota existente\n      updatePet({ id: editingPet.id, pet: data });\n    } else {\n      // Crear nueva mascota\n      createPet(data);\n    }\n    \n    // Volver a la vista de lista después de enviar\n    setViewMode(\"list\");\n    setEditingPet(null);\n  };\n  \n  return (\n    <MainLayout title=\"Gestión de Mascotas\">\n      {viewMode === \"list\" ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl font-bold tracking-tight\">Mascotas</h1>\n              <p className=\"text-muted-foreground\">\n                Administra el registro de mascotas en el sistema.\n              </p>\n            </div>\n            <Button \n              onClick={handleAddNew}\n              className=\"bg-accent hover:bg-green-700 text-white\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" /> Agregar Mascota\n            </Button>\n          </div>\n          \n          <PetTable \n            pets={pets}\n            onEdit={handleEdit}\n            onDelete={confirmDelete}\n            isLoading={isLoadingPets}\n          />\n          \n          <DeleteConfirmationDialog\n            isOpen={isDeleteDialogOpen}\n            onClose={cancelDelete}\n            onConfirm={handleDelete}\n            title=\"Confirmar Eliminación\"\n            description={\n              petToDelete \n                ? `¿Está seguro que desea eliminar a ${petToDelete.name}? Esta acción no se puede deshacer.`\n                : \"¿Está seguro que desea eliminar esta mascota? Esta acción no se puede deshacer.\"\n            }\n          />\n        </div>\n      ) : (\n        <PetForm\n          initialData={editingPet || undefined}\n          onSubmit={handleSubmit}\n          onCancel={handleCancel}\n          isSubmitting={isSubmitting}\n        />\n      )}\n    </MainLayout>\n  );\n}\n","size_bytes":3385},"client/src/pages/Products.tsx":{"content":"import { useState } from \"react\";\nimport { ProductTable } from \"@/components/products/ProductTable\";\nimport { ProductForm } from \"@/components/products/ProductForm\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/DeleteConfirmationDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Plus } from \"lucide-react\";\nimport { useProducts } from \"@/hooks/useProducts\";\nimport { Product, InsertProduct } from \"@shared/schema\";\nimport { ViewMode } from \"@/lib/types\";\n\nexport default function Products() {\n  // Estado local para controlar la vista actual y el producto en edición\n  const [viewMode, setViewMode] = useState<ViewMode>(\"list\");\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  \n  // Obtener las funciones y datos del hook personalizado\n  const { \n    products, \n    isLoadingProducts,\n    createProduct, \n    updateProduct, \n    isSubmitting,\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    productToDelete\n  } = useProducts();\n  \n  // Cambiar a vista de formulario para agregar\n  const handleAddNew = () => {\n    setEditingProduct(null);\n    setViewMode(\"form\");\n  };\n  \n  // Cambiar a vista de formulario para editar\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setViewMode(\"form\");\n  };\n  \n  // Volver a la vista de lista\n  const handleCancel = () => {\n    setViewMode(\"list\");\n    setEditingProduct(null);\n  };\n  \n  // Manejar el envío del formulario\n  const handleSubmit = (data: InsertProduct) => {\n    if (editingProduct) {\n      // Actualizar producto existente\n      updateProduct({ id: editingProduct.id, product: data });\n    } else {\n      // Crear nuevo producto\n      createProduct(data);\n    }\n    \n    // Volver a la vista de lista después de enviar\n    setViewMode(\"list\");\n    setEditingProduct(null);\n  };\n  \n  return (\n    <MainLayout title=\"Gestión de Productos\">\n      {viewMode === \"list\" ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl font-bold tracking-tight\">Productos</h1>\n              <p className=\"text-muted-foreground\">\n                Administra el catálogo de productos del sistema.\n              </p>\n            </div>\n            <Button \n              onClick={handleAddNew}\n              className=\"bg-accent hover:bg-green-700 text-white\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" /> Agregar Producto\n            </Button>\n          </div>\n          \n          <ProductTable \n            products={products}\n            onEdit={handleEdit}\n            onDelete={confirmDelete}\n            isLoading={isLoadingProducts}\n          />\n          \n          <DeleteConfirmationDialog\n            isOpen={isDeleteDialogOpen}\n            onClose={cancelDelete}\n            onConfirm={handleDelete}\n            title=\"Confirmar Eliminación\"\n            description={\n              productToDelete \n                ? `¿Está seguro que desea eliminar el producto \"${productToDelete.name}\"? Esta acción no se puede deshacer.`\n                : \"¿Está seguro que desea eliminar este producto? Esta acción no se puede deshacer.\"\n            }\n          />\n        </div>\n      ) : (\n        <ProductForm\n          initialData={editingProduct || undefined}\n          onSubmit={handleSubmit}\n          onCancel={handleCancel}\n          isSubmitting={isSubmitting}\n        />\n      )}\n    </MainLayout>\n  );\n}","size_bytes":3567},"client/src/pages/Reports.tsx":{"content":"import { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { Sale } from \"@shared/schema\";\n\nconst COLORS = [\"#26a69a\", \"#ffba57\", \"#26c281\", \"#e74c3c\", \"#ffb72b\", \"#7c6e5d\"];\n\nexport default function Reports() {\n  // Consulta para obtener las ventas para los informes\n  const { data: sales = [], isLoading: isLoadingSales } = useQuery<Sale[]>({\n    queryKey: [\"/api/sales\"],\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Datos calculados para los gráficos\n  const salesByMonth = calculateSalesByMonth(sales);\n  const salesByPaymentMethod = calculateSalesByPaymentMethod(sales);\n\n  // Verificar cantidad de datos para mostrar alternativa si no hay suficiente información\n  const hasEnoughData = sales.length > 0;\n\n  return (\n    <MainLayout title=\"Informes\">\n      <div className=\"animate-fade-in space-y-4\">\n        <h1 className=\"text-2xl font-bold text-primary\">Panel de Informes</h1>\n        <p className=\"text-muted-foreground\">\n          Visualiza estadísticas y reportes de la tienda de mascotas.\n        </p>\n        \n        {!hasEnoughData && (\n          <div className=\"p-4 bg-muted rounded-lg mb-4\">\n            <h3 className=\"font-medium text-lg\">Información de demostración</h3>\n            <p className=\"text-muted-foreground\">\n              Actualmente no hay suficientes datos para generar informes completos. Los gráficos mostrados contienen datos de muestra para fines ilustrativos.\n            </p>\n          </div>\n        )}\n        \n        <Tabs defaultValue=\"sales\" className=\"w-full mt-6\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"sales\">Ventas</TabsTrigger>\n            <TabsTrigger value=\"inventory\">Inventario</TabsTrigger>\n            <TabsTrigger value=\"clients\">Clientes</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"sales\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Gráfico de Ventas Mensuales */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Ventas por Mes</CardTitle>\n                  <CardDescription>\n                    Análisis de ventas mensuales del año actual\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"h-80\">\n                  {isLoadingSales ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <p>Cargando datos...</p>\n                    </div>\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart\n                        data={salesByMonth}\n                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => [`$${value}`, 'Ventas']} />\n                        <Legend />\n                        <Bar dataKey=\"value\" fill=\"#26a69a\" name=\"Ventas ($)\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Gráfico de Métodos de Pago */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Métodos de Pago</CardTitle>\n                  <CardDescription>\n                    Distribución de ventas por método de pago\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"h-80\">\n                  {isLoadingSales ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <p>Cargando datos...</p>\n                    </div>\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={salesByPaymentMethod}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={true}\n                          label={renderCustomizedLabel}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {salesByPaymentMethod.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value) => [`$${value}`, 'Total']} />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Resumen de Ventas</CardTitle>\n                <CardDescription>\n                  Estadísticas generales de ventas\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <h3 className=\"text-lg font-medium\">Total Ventas</h3>\n                    <p className=\"text-3xl font-bold text-primary\">\n                      ${calculateTotalSales(sales || [])}\n                    </p>\n                  </div>\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <h3 className=\"text-lg font-medium\">Ventas Mensuales</h3>\n                    <p className=\"text-3xl font-bold text-secondary\">\n                      ${calculateCurrentMonthSales(sales || [])}\n                    </p>\n                  </div>\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <h3 className=\"text-lg font-medium\">Número de Ventas</h3>\n                    <p className=\"text-3xl font-bold text-accent\">\n                      {sales?.length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"inventory\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Estado de Inventario</CardTitle>\n                <CardDescription>\n                  Esta sección está en desarrollo\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"h-60 flex items-center justify-center\">\n                <p className=\"text-muted-foreground text-center\">\n                  El módulo de informes de inventario estará disponible próximamente.<br />\n                  Estamos trabajando para proporcionar análisis detallados de stock.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"clients\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Análisis de Clientes</CardTitle>\n                <CardDescription>\n                  Esta sección está en desarrollo\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"h-60 flex items-center justify-center\">\n                <p className=\"text-muted-foreground text-center\">\n                  El módulo de análisis de clientes estará disponible próximamente.<br />\n                  Estamos trabajando para proporcionar insights valiosos sobre sus clientes.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}\n\n// Función para etiquetar el gráfico circular\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, name }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = outerRadius * 1.1;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text \n      x={x} \n      y={y} \n      fill={COLORS[index % COLORS.length]}\n      textAnchor={x > cx ? 'start' : 'end'} \n      dominantBaseline=\"central\"\n      fontSize={12}\n    >\n      {`${name} (${(percent * 100).toFixed(0)}%)`}\n    </text>\n  );\n};\n\n// Funciones de cálculo para los informes\nfunction calculateSalesByMonth(sales: Sale[]) {\n  const monthNames = [\n    \"Ene\", \"Feb\", \"Mar\", \"Abr\", \"May\", \"Jun\", \n    \"Jul\", \"Ago\", \"Sep\", \"Oct\", \"Nov\", \"Dic\"\n  ];\n\n  // Inicializar datos con todos los meses y valores en cero\n  const monthlySales = monthNames.map(name => ({ name, value: 0 }));\n  \n  // Llenar con datos reales\n  sales.forEach(sale => {\n    if (sale.createdAt) {\n      const saleDate = new Date(sale.createdAt);\n      const monthIndex = saleDate.getMonth();\n      monthlySales[monthIndex].value += sale.total;\n    }\n  });\n  \n  return monthlySales;\n}\n\nfunction calculateSalesByPaymentMethod(sales: Sale[]) {\n  const paymentMethods: Record<string, number> = {};\n  \n  sales.forEach(sale => {\n    if (sale.paymentMethod) {\n      if (!paymentMethods[sale.paymentMethod]) {\n        paymentMethods[sale.paymentMethod] = 0;\n      }\n      paymentMethods[sale.paymentMethod] += sale.total;\n    }\n  });\n  \n  return Object.entries(paymentMethods).map(([name, value]) => ({\n    name,\n    value\n  }));\n}\n\nfunction calculateTotalSales(sales: Sale[]) {\n  return sales.reduce((total, sale) => total + sale.total, 0).toFixed(2);\n}\n\nfunction calculateCurrentMonthSales(sales: Sale[]) {\n  const now = new Date();\n  const currentMonth = now.getMonth();\n  const currentYear = now.getFullYear();\n  \n  const monthlySales = sales.reduce((total, sale) => {\n    if (sale.createdAt) {\n      const saleDate = new Date(sale.createdAt);\n      if (saleDate.getMonth() === currentMonth && saleDate.getFullYear() === currentYear) {\n        return total + sale.total;\n      }\n    }\n    return total;\n  }, 0);\n  \n  return monthlySales.toFixed(2);\n}","size_bytes":10497},"client/src/pages/Sales.tsx":{"content":"import { useState } from \"react\";\nimport { SaleTable } from \"@/components/sales/SaleTable\";\nimport { SaleDetail } from \"@/components/sales/SaleDetail\";\nimport { DeleteConfirmationDialog } from \"@/components/ui/DeleteConfirmationDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { useSales } from \"@/hooks/useSales\";\nimport { Sale, SaleItem } from \"@shared/schema\";\n\ntype ViewMode = 'list' | 'detail';\n\nexport default function Sales() {\n  // Estado local para controlar la vista actual y la venta seleccionada\n  const [viewMode, setViewMode] = useState<ViewMode>(\"list\");\n  const [selectedSale, setSelectedSale] = useState<Sale | null>(null);\n  const [saleItems, setSaleItems] = useState<SaleItem[]>([]);\n  \n  // Obtener las funciones y datos del hook personalizado\n  const { \n    sales, \n    isLoadingSales,\n    confirmDelete,\n    cancelDelete,\n    handleDelete,\n    isDeleteDialogOpen,\n    saleToDelete,\n    getSale\n  } = useSales();\n  \n  // Ver detalles de una venta\n  const handleViewSale = async (sale: Sale) => {\n    setSelectedSale(sale);\n    \n    // Obtener los items de la venta\n    try {\n      const { data } = getSale(sale.id);\n      if (data) {\n        setSaleItems(data.items || []);\n      }\n    } catch (error) {\n      console.error(\"Error al obtener los items de la venta:\", error);\n      setSaleItems([]);\n    }\n    \n    setViewMode(\"detail\");\n  };\n  \n  // Volver a la vista de lista\n  const handleBackToList = () => {\n    setViewMode(\"list\");\n    setSelectedSale(null);\n    setSaleItems([]);\n  };\n  \n  return (\n    <MainLayout title=\"Gestión de Ventas\">\n      {viewMode === \"list\" ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl font-bold tracking-tight\">Ventas</h1>\n              <p className=\"text-muted-foreground\">\n                Consulta el historial de ventas realizadas\n              </p>\n            </div>\n          </div>\n          \n          <SaleTable \n            sales={sales}\n            onView={handleViewSale}\n            onDelete={confirmDelete}\n            isLoading={isLoadingSales}\n          />\n          \n          <DeleteConfirmationDialog\n            isOpen={isDeleteDialogOpen}\n            onClose={cancelDelete}\n            onConfirm={handleDelete}\n            title=\"Confirmar Eliminación\"\n            description={\n              saleToDelete \n                ? `¿Está seguro que desea eliminar la venta #${saleToDelete.id}? Esta acción no se puede deshacer.`\n                : \"¿Está seguro que desea eliminar esta venta? Esta acción no se puede deshacer.\"\n            }\n          />\n        </div>\n      ) : selectedSale && (\n        <SaleDetail\n          sale={selectedSale}\n          saleItems={saleItems}\n          onBack={handleBackToList}\n        />\n      )}\n    </MainLayout>\n  );\n}","size_bytes":2928},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function Settings() {\n  // Estados para los diferentes formularios\n  const [storeInfo, setStoreInfo] = useState({\n    storeName: \"Mi Tienda de Mascotas\",\n    address: \"Calle Principal 123\",\n    phone: \"555-123-4567\",\n    email: \"contacto@tiendamascotas.com\",\n    taxRate: \"16\",\n    currency: \"MXN\"\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    lowStockAlerts: true,\n    salesReports: true,\n    customerBirthdays: false\n  });\n\n  const [userPreferences, setUserPreferences] = useState({\n    language: \"es\",\n    theme: \"light\",\n    itemsPerPage: \"10\"\n  });\n\n  // Manejadores de cambios\n  const handleStoreInfoChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setStoreInfo({\n      ...storeInfo,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleNotificationToggle = (key: keyof typeof notificationSettings) => {\n    setNotificationSettings({\n      ...notificationSettings,\n      [key]: !notificationSettings[key]\n    });\n  };\n\n  const handleUserPreferenceChange = (key: keyof typeof userPreferences, value: string) => {\n    setUserPreferences({\n      ...userPreferences,\n      [key]: value\n    });\n  };\n\n  // Manejador de guardado\n  const handleSaveSettings = (section: string) => {\n    toast({\n      title: \"Configuración guardada\",\n      description: `Las configuraciones de ${section} se han guardado correctamente.`,\n    });\n  };\n\n  return (\n    <MainLayout title=\"Configuración\">\n      <div className=\"animate-fade-in space-y-4\">\n        <h1 className=\"text-2xl font-bold text-primary\">Configuración del Sistema</h1>\n        <p className=\"text-muted-foreground\">\n          Ajusta las preferencias y configuraciones de la tienda de mascotas.\n        </p>\n        \n        <Tabs defaultValue=\"store\" className=\"w-full mt-6\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"store\">Información de Tienda</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notificaciones</TabsTrigger>\n            <TabsTrigger value=\"users\">Preferencias</TabsTrigger>\n            <TabsTrigger value=\"backup\">Copia de Seguridad</TabsTrigger>\n          </TabsList>\n          \n          {/* Pestaña de Información de la Tienda */}\n          <TabsContent value=\"store\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Información de la Tienda</CardTitle>\n                <CardDescription>\n                  Configure la información básica de su tienda de mascotas\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storeName\">Nombre de la Tienda</Label>\n                    <Input \n                      id=\"storeName\"\n                      name=\"storeName\"\n                      value={storeInfo.storeName}\n                      onChange={handleStoreInfoChange}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"address\">Dirección</Label>\n                    <Input \n                      id=\"address\"\n                      name=\"address\"\n                      value={storeInfo.address}\n                      onChange={handleStoreInfoChange}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Teléfono</Label>\n                    <Input \n                      id=\"phone\"\n                      name=\"phone\"\n                      value={storeInfo.phone}\n                      onChange={handleStoreInfoChange}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Correo Electrónico</Label>\n                    <Input \n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={storeInfo.email}\n                      onChange={handleStoreInfoChange}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxRate\">Tasa de Impuesto (%)</Label>\n                    <Input \n                      id=\"taxRate\"\n                      name=\"taxRate\"\n                      type=\"number\"\n                      value={storeInfo.taxRate}\n                      onChange={handleStoreInfoChange}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Moneda</Label>\n                    <Select \n                      value={storeInfo.currency}\n                      onValueChange={(value) => setStoreInfo({...storeInfo, currency: value})}\n                    >\n                      <SelectTrigger id=\"currency\">\n                        <SelectValue placeholder=\"Seleccione una moneda\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"MXN\">Peso Mexicano (MXN)</SelectItem>\n                        <SelectItem value=\"USD\">Dólar Estadounidense (USD)</SelectItem>\n                        <SelectItem value=\"EUR\">Euro (EUR)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={() => handleSaveSettings(\"información de la tienda\")}\n                  className=\"ml-auto\"\n                >\n                  Guardar Cambios\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n          \n          {/* Pestaña de Notificaciones */}\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Configuración de Notificaciones</CardTitle>\n                <CardDescription>\n                  Controle qué notificaciones desea recibir\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Notificaciones por Email</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Recibir notificaciones importantes por correo electrónico\n                    </p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.emailNotifications}\n                    onCheckedChange={() => handleNotificationToggle(\"emailNotifications\")}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Alertas de Stock Bajo</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Recibir alertas cuando el inventario esté por debajo del mínimo\n                    </p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.lowStockAlerts}\n                    onCheckedChange={() => handleNotificationToggle(\"lowStockAlerts\")}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Informes de Ventas</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Recibir informes semanales de ventas\n                    </p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.salesReports}\n                    onCheckedChange={() => handleNotificationToggle(\"salesReports\")}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Cumpleaños de Clientes</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Recibir recordatorios de cumpleaños de los clientes\n                    </p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.customerBirthdays}\n                    onCheckedChange={() => handleNotificationToggle(\"customerBirthdays\")}\n                  />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={() => handleSaveSettings(\"notificaciones\")}\n                  className=\"ml-auto\"\n                >\n                  Guardar Cambios\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n          \n          {/* Pestaña de Preferencias del Usuario */}\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Preferencias de Usuario</CardTitle>\n                <CardDescription>\n                  Personaliza tu experiencia con la aplicación\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"language\">Idioma</Label>\n                    <Select \n                      value={userPreferences.language}\n                      onValueChange={(value) => handleUserPreferenceChange(\"language\", value)}\n                    >\n                      <SelectTrigger id=\"language\">\n                        <SelectValue placeholder=\"Seleccione un idioma\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"es\">Español</SelectItem>\n                        <SelectItem value=\"en\">Inglés</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"theme\">Tema</Label>\n                    <Select \n                      value={userPreferences.theme}\n                      onValueChange={(value) => handleUserPreferenceChange(\"theme\", value)}\n                    >\n                      <SelectTrigger id=\"theme\">\n                        <SelectValue placeholder=\"Seleccione un tema\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"light\">Claro</SelectItem>\n                        <SelectItem value=\"dark\">Oscuro</SelectItem>\n                        <SelectItem value=\"system\">Sistema</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"itemsPerPage\">Elementos por Página</Label>\n                    <Select \n                      value={userPreferences.itemsPerPage}\n                      onValueChange={(value) => handleUserPreferenceChange(\"itemsPerPage\", value)}\n                    >\n                      <SelectTrigger id=\"itemsPerPage\">\n                        <SelectValue placeholder=\"Seleccione cantidad\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"10\">10</SelectItem>\n                        <SelectItem value=\"20\">20</SelectItem>\n                        <SelectItem value=\"50\">50</SelectItem>\n                        <SelectItem value=\"100\">100</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={() => handleSaveSettings(\"preferencias de usuario\")}\n                  className=\"ml-auto\"\n                >\n                  Guardar Cambios\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n          \n          {/* Pestaña de Copia de Seguridad */}\n          <TabsContent value=\"backup\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Copia de Seguridad y Restauración</CardTitle>\n                <CardDescription>\n                  Gestione copias de seguridad de sus datos\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <Alert variant=\"default\" className=\"bg-muted\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertTitle>Información</AlertTitle>\n                  <AlertDescription>\n                    Las copias de seguridad incluyen todos los datos de clientes, mascotas, \n                    productos y ventas. Se recomienda realizar copias de seguridad periódicas.\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card className=\"shadow-none border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg\">Copia de Seguridad</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Descargue una copia de seguridad completa de todos sus datos\n                      </p>\n                      <Button variant=\"secondary\" className=\"w-full\">\n                        Crear Copia de Seguridad\n                      </Button>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"shadow-none border\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg\">Restaurar Datos</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Restaure sus datos desde una copia de seguridad anterior\n                      </p>\n                      <div className=\"flex flex-col space-y-2\">\n                        <Input id=\"backup-file\" type=\"file\" className=\"w-full\" />\n                        <Button variant=\"secondary\" className=\"w-full\">\n                          Restaurar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Programación de Copias</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch id=\"auto-backup\" />\n                      <Label htmlFor=\"auto-backup\">Copias de seguridad automáticas</Label>\n                    </div>\n                    <Select defaultValue=\"weekly\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Frecuencia\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"daily\">Diaria</SelectItem>\n                        <SelectItem value=\"weekly\">Semanal</SelectItem>\n                        <SelectItem value=\"monthly\">Mensual</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={() => handleSaveSettings(\"copia de seguridad\")}\n                  className=\"ml-auto\"\n                >\n                  Guardar Configuración\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":17313},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/clients/ClientForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertClientSchema, InsertClient, Client } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowLeft, UserCircle } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\n\n// Extendemos el esquema para añadir validaciones específicas del formulario\nconst formSchema = insertClientSchema.extend({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n});\n\ninterface ClientFormProps {\n  initialData?: Client;\n  onSubmit: (data: InsertClient) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n}\n\nexport function ClientForm({ initialData, onSubmit, onCancel, isSubmitting = false }: ClientFormProps) {\n  // Inicializar el formulario con react-hook-form\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: initialData?.name || \"\",\n      email: initialData?.email || \"\",\n      phone: initialData?.phone || \"\",\n      address: initialData?.address || \"\",\n      city: initialData?.city || \"\",\n      postalCode: initialData?.postalCode || \"\",\n      notes: initialData?.notes || \"\",\n      active: initialData?.active === false ? false : true,\n    },\n  });\n\n  // Función para manejar el envío del formulario\n  const handleSubmit = form.handleSubmit((data) => {\n    onSubmit(data);\n  });\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow-sm animate-fade-in\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">\n            {initialData ? \"Editar Cliente\" : \"Registrar Nuevo Cliente\"}\n          </h3>\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Volver al Listado\n          </Button>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row gap-6\">\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del Cliente *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Nombre completo\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" placeholder=\"correo@ejemplo.com\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Teléfono</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Teléfono de contacto\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-start space-x-3 p-2 rounded-lg\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"mt-0\">Cliente activo</FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Dirección</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Dirección completa\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ciudad</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Ciudad\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"postalCode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Código Postal</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"CP\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notas adicionales</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Información adicional sobre el cliente\"\n                          rows={3}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 mt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"border border-gray-300 shadow-sm\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                {isSubmitting ? \"Guardando...\" : \"Guardar Cliente\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7731},"client/src/components/clients/ClientTable.tsx":{"content":"import { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Client } from \"@shared/schema\";\nimport { Edit, Trash2, Mail, Phone } from \"lucide-react\";\nimport { \n  Pagination, \n  PaginationContent,\n  PaginationItem,\n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious \n} from \"@/components/ui/pagination\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ClientTableProps {\n  clients: Client[];\n  onEdit: (client: Client) => void;\n  onDelete: (client: Client) => void;\n  isLoading?: boolean;\n}\n\nexport function ClientTable({ clients, onEdit, onDelete, isLoading = false }: ClientTableProps) {\n  const handleEdit = (client: Client) => {\n    onEdit(client);\n  };\n\n  const handleDelete = (client: Client) => {\n    onDelete(client);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[50px]\">ID</TableHead>\n              <TableHead>Nombre</TableHead>\n              <TableHead>Contacto</TableHead>\n              <TableHead>Dirección</TableHead>\n              <TableHead>Estado</TableHead>\n              <TableHead className=\"w-[100px]\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center py-10\">\n                  Cargando clientes...\n                </TableCell>\n              </TableRow>\n            ) : clients.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center py-10\">\n                  No hay clientes registrados.\n                </TableCell>\n              </TableRow>\n            ) : (\n              clients.map((client) => (\n                <TableRow key={client.id}>\n                  <TableCell className=\"font-medium\">{client.id}</TableCell>\n                  <TableCell className=\"font-medium\">{client.name}</TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      {client.email && (\n                        <div className=\"flex items-center text-sm\">\n                          <Mail className=\"h-3 w-3 mr-1 text-muted-foreground\" />\n                          <span>{client.email}</span>\n                        </div>\n                      )}\n                      {client.phone && (\n                        <div className=\"flex items-center text-sm mt-1\">\n                          <Phone className=\"h-3 w-3 mr-1 text-muted-foreground\" />\n                          <span>{client.phone}</span>\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {client.address && (\n                        <div>{client.address}</div>\n                      )}\n                      {(client.city || client.postalCode) && (\n                        <div className=\"text-muted-foreground\">\n                          {client.city}{client.city && client.postalCode ? ', ' : ''}{client.postalCode}\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {client.active ? (\n                      <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                        Activo\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"bg-gray-50 text-gray-600 border-gray-200\">\n                        Inactivo\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-primary hover:text-primary/80 hover:bg-primary/10\"\n                        onClick={() => handleEdit(client)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        onClick={() => handleDelete(client)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"mt-4 flex justify-between items-center\">\n        <div className=\"text-sm text-gray-600\">\n          {isLoading ? \"Cargando...\" : `Mostrando ${clients.length} clientes`}\n        </div>\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>1</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}","size_bytes":5586},"client/src/components/layout/MainLayout.tsx":{"content":"import { Sidebar } from \"@/components/layout/Sidebar\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Link } from \"wouter\";\nimport { DEFAULT_AVATAR } from \"@/lib/constants\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n  title?: string;\n}\n\nexport function MainLayout({ children, title = \"Panel de Administración\" }: MainLayoutProps) {\n  return (\n    <div className=\"min-h-screen flex flex-col md:flex-row\">\n      <Sidebar />\n      \n      <main className=\"flex-grow\">\n        {/* Top Navigation */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex justify-between items-center p-4\">\n            <h2 className=\"text-lg font-semibold text-gray-700\">{title}</h2>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative hidden sm:block\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Buscar...\"\n                  className=\"py-1 pl-3 pr-8 border rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-primary\"\n                />\n                <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              </div>\n              <div className=\"flex items-center\">\n                <span className=\"text-sm text-gray-700 mr-2\">Admin</span>\n                <Link href=\"/profile\">\n                  <a>\n                    <img \n                      src={DEFAULT_AVATAR} \n                      alt=\"Perfil\" \n                      className=\"w-8 h-8 rounded-full\"\n                    />\n                  </a>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        {/* Main Content */}\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n      \n      <Toaster />\n    </div>\n  );\n}\n","size_bytes":1941},"client/src/components/layout/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useRoute } from \"wouter\";\nimport { SIDEBAR_LINKS } from \"@/lib/constants\";\nimport { PawPrint } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  \n  return (\n    <aside className={`bg-primary text-white w-full md:w-64 md:min-h-screen flex-shrink-0 ${className}`}>\n      <div className=\"p-4 flex items-center justify-between md:justify-center\">\n        <div className=\"flex items-center space-x-3\">\n          <PawPrint className=\"h-6 w-6\" />\n          <h1 className=\"text-xl font-bold\">PetShop Admin</h1>\n        </div>\n        <Button \n          variant=\"ghost\" \n          className=\"md:hidden text-white\" \n          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          aria-label=\"Menú\"\n        >\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className=\"h-6 w-6\" \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16m-7 6h7\" />\n          </svg>\n        </Button>\n      </div>\n      \n      <nav className={`${mobileMenuOpen ? 'block' : 'hidden'} md:block px-4 py-2`}>\n        <ul className=\"space-y-2\">\n          {SIDEBAR_LINKS.map((link, index) => (\n            <SidebarLink \n              key={index} \n              href={link.href} \n              icon={<link.icon className=\"w-5 h-5\" />}\n              label={link.label}\n            />\n          ))}\n        </ul>\n      </nav>\n    </aside>\n  );\n}\n\ninterface SidebarLinkProps {\n  href: string;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction SidebarLink({ href, icon, label }: SidebarLinkProps) {\n  const [isActive] = useRoute(href);\n  \n  return (\n    <li>\n      <Link href={href}>\n        <div className={`flex items-center p-2 rounded transition duration-200 ${\n          isActive ? 'bg-blue-600' : 'hover:bg-blue-600'\n        }`}>\n          <span className=\"w-6\">{icon}</span>\n          <span>{label}</span>\n        </div>\n      </Link>\n    </li>\n  );\n}\n","size_bytes":2242},"client/src/components/pets/PetForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertPetSchema, InsertPet, Pet } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft, PawPrint } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { AGE_UNIT_OPTIONS, PET_OWNERS, SPECIES_OPTIONS } from \"@/lib/types\";\nimport { DEFAULT_PET_PHOTO } from \"@/lib/constants\";\n\n// Extendemos el esquema para añadir validaciones específicas del formulario\nconst formSchema = insertPetSchema.extend({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n  species: z.string().min(1, { message: \"Seleccione una especie\" }),\n  owner: z.string().min(1, { message: \"Seleccione un propietario\" }),\n});\n\ninterface PetFormProps {\n  initialData?: Pet;\n  onSubmit: (data: InsertPet) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n}\n\nexport function PetForm({ initialData, onSubmit, onCancel, isSubmitting = false }: PetFormProps) {\n  // Estado para la vista previa de la foto\n  const [photoPreview, setPhotoPreview] = useState<string>(initialData?.photo || DEFAULT_PET_PHOTO);\n  \n  // Inicializar el formulario con react-hook-form\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: initialData?.name || \"\",\n      species: initialData?.species || \"\",\n      breed: initialData?.breed || \"\",\n      age: initialData?.age || null,\n      ageUnit: initialData?.ageUnit || \"years\",\n      gender: initialData?.gender || \"male\",\n      owner: initialData?.owner || \"\",\n      weight: initialData?.weight || null,\n      photo: initialData?.photo || \"\",\n      notes: initialData?.notes || \"\",\n      active: initialData?.active !== false,\n    },\n  });\n\n  // Función para simular la carga de una foto (en un entorno real, usaríamos un servicio de almacenamiento)\n  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // En una implementación real, subiríamos el archivo y obtendríamos una URL\n      // Aquí solo simulamos la vista previa\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const result = reader.result as string;\n        setPhotoPreview(result);\n        form.setValue(\"photo\", result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Función para manejar el envío del formulario\n  const handleSubmit = form.handleSubmit((data) => {\n    onSubmit(data);\n  });\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow-sm animate-fade-in\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">\n            {initialData ? \"Editar Mascota\" : \"Registrar Nueva Mascota\"}\n          </h3>\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Volver al Listado\n          </Button>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row gap-6\">\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre de la Mascota *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Nombre\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"species\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Especie *</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Seleccionar especie\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {SPECIES_OPTIONS.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"breed\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Raza</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Raza\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"age\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Edad</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => {\n                              const value = e.target.value ? parseInt(e.target.value) : null;\n                              field.onChange(value);\n                            }}\n                            min={0}\n                            max={100}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"ageUnit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unidad</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Unidad\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {AGE_UNIT_OPTIONS.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"gender\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-3\">\n                      <FormLabel>Género</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex space-x-4\"\n                        >\n                          <FormItem className=\"flex items-center space-x-2\">\n                            <FormControl>\n                              <RadioGroupItem value=\"male\" />\n                            </FormControl>\n                            <FormLabel className=\"font-normal cursor-pointer\">\n                              Macho\n                            </FormLabel>\n                          </FormItem>\n                          <FormItem className=\"flex items-center space-x-2\">\n                            <FormControl>\n                              <RadioGroupItem value=\"female\" />\n                            </FormControl>\n                            <FormLabel className=\"font-normal cursor-pointer\">\n                              Hembra\n                            </FormLabel>\n                          </FormItem>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"owner\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Propietario *</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Seleccionar propietario\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {PET_OWNERS.map((owner) => (\n                            <SelectItem key={owner.id} value={owner.name}>\n                              {owner.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"photo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Foto</FormLabel>\n                      <div className=\"mt-1 flex items-center\">\n                        <span className=\"inline-block h-16 w-16 rounded-full overflow-hidden bg-gray-100 mr-4\">\n                          {photoPreview ? (\n                            <img\n                              src={photoPreview}\n                              alt=\"Vista previa\"\n                              className=\"h-full w-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"h-full w-full flex items-center justify-center\">\n                              <PawPrint className=\"h-8 w-8 text-gray-400\" />\n                            </div>\n                          )}\n                        </span>\n                        <label\n                          htmlFor=\"pet-photo\"\n                          className=\"bg-gray-200 py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary cursor-pointer\"\n                        >\n                          Cambiar\n                        </label>\n                        <input\n                          type=\"file\"\n                          id=\"pet-photo\"\n                          name=\"pet-photo\"\n                          className=\"hidden\"\n                          accept=\"image/*\"\n                          onChange={handlePhotoChange}\n                        />\n                        <input type=\"hidden\" {...field} />\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"weight\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Peso (kg)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          min=\"0\"\n                          {...field}\n                          value={field.value || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value ? parseFloat(e.target.value) : null;\n                            field.onChange(value);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notas adicionales</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Información adicional sobre la mascota\"\n                          rows={3}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-start space-x-3 p-2 rounded-lg\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"mt-0\">Mascota activa</FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 mt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"border border-gray-300 shadow-sm\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                {isSubmitting ? \"Guardando...\" : \"Guardar Mascota\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15652},"client/src/components/pets/PetTable.tsx":{"content":"import { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Pet } from \"@shared/schema\";\nimport { Edit, Trash2 } from \"lucide-react\";\nimport { formatAge } from \"@/lib/utils/formatUtils\";\nimport { DEFAULT_PET_PHOTO } from \"@/lib/constants\";\nimport { \n  Pagination, \n  PaginationContent,\n  PaginationItem,\n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious \n} from \"@/components/ui/pagination\";\n\ninterface PetTableProps {\n  pets: Pet[];\n  onEdit: (pet: Pet) => void;\n  onDelete: (pet: Pet) => void;\n  isLoading?: boolean;\n}\n\nexport function PetTable({ pets, onEdit, onDelete, isLoading = false }: PetTableProps) {\n  const handleEdit = (pet: Pet) => {\n    onEdit(pet);\n  };\n\n  const handleDelete = (pet: Pet) => {\n    onDelete(pet);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[50px]\">ID</TableHead>\n              <TableHead className=\"w-[70px]\">Foto</TableHead>\n              <TableHead>Nombre</TableHead>\n              <TableHead>Especie</TableHead>\n              <TableHead>Raza</TableHead>\n              <TableHead>Edad</TableHead>\n              <TableHead>Propietario</TableHead>\n              <TableHead className=\"w-[100px]\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-10\">\n                  Cargando mascotas...\n                </TableCell>\n              </TableRow>\n            ) : pets.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-10\">\n                  No hay mascotas registradas.\n                </TableCell>\n              </TableRow>\n            ) : (\n              pets.map((pet) => (\n                <TableRow key={pet.id}>\n                  <TableCell className=\"font-medium\">{pet.id}</TableCell>\n                  <TableCell>\n                    <img\n                      src={pet.photo || DEFAULT_PET_PHOTO}\n                      alt={pet.name}\n                      className=\"h-10 w-10 rounded-full object-cover\"\n                    />\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{pet.name}</TableCell>\n                  <TableCell>{pet.species}</TableCell>\n                  <TableCell>{pet.breed || 'N/A'}</TableCell>\n                  <TableCell>{formatAge(pet.age, pet.ageUnit || 'years')}</TableCell>\n                  <TableCell>{pet.owner}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-primary hover:text-primary/80 hover:bg-primary/10\"\n                        onClick={() => handleEdit(pet)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        onClick={() => handleDelete(pet)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"mt-4 flex justify-between items-center\">\n        <div className=\"text-sm text-gray-600\">\n          {isLoading ? \"Cargando...\" : `Mostrando ${pets.length} mascotas`}\n        </div>\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>1</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4419},"client/src/components/products/ProductForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertProductSchema, InsertProduct, Product } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowLeft, Package } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Extendemos el esquema para añadir validaciones específicas del formulario\nconst formSchema = insertProductSchema.extend({\n  name: z.string().min(2, { message: \"El nombre debe tener al menos 2 caracteres\" }),\n  category: z.string().min(1, { message: \"Seleccione una categoría\" }),\n  price: z.coerce.number().min(0.01, { message: \"El precio debe ser mayor a 0\" }),\n});\n\n// Categorías de productos\nconst PRODUCT_CATEGORIES = [\n  { value: \"Alimentos\", label: \"Alimentos\" },\n  { value: \"Accesorios\", label: \"Accesorios\" },\n  { value: \"Juguetes\", label: \"Juguetes\" },\n  { value: \"Higiene\", label: \"Higiene\" },\n  { value: \"Salud\", label: \"Salud\" },\n  { value: \"Otros\", label: \"Otros\" },\n];\n\ninterface ProductFormProps {\n  initialData?: Product;\n  onSubmit: (data: InsertProduct) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n}\n\nexport function ProductForm({ initialData, onSubmit, onCancel, isSubmitting = false }: ProductFormProps) {\n  // Estado para la vista previa de la imagen\n  const [imagePreview, setImagePreview] = useState<string>(initialData?.image || \"\");\n  \n  // Inicializar el formulario con react-hook-form\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: initialData?.name || \"\",\n      description: initialData?.description || \"\",\n      category: initialData?.category || \"\",\n      price: initialData?.price || 0,\n      stock: initialData?.stock || 0,\n      image: initialData?.image || \"\",\n      sku: initialData?.sku || \"\",\n      active: initialData?.active === false ? false : true,\n    },\n  });\n\n  // Función para simular la carga de una imagen (en un entorno real, usaríamos un servicio de almacenamiento)\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // En una implementación real, subiríamos el archivo y obtendríamos una URL\n      // Aquí solo simulamos la vista previa\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const result = reader.result as string;\n        setImagePreview(result);\n        form.setValue(\"image\", result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Función para manejar el envío del formulario\n  const handleSubmit = form.handleSubmit((data) => {\n    onSubmit(data);\n  });\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow-sm animate-fade-in\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">\n            {initialData ? \"Editar Producto\" : \"Registrar Nuevo Producto\"}\n          </h3>\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-700\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Volver al Listado\n          </Button>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row gap-6\">\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del Producto *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Nombre del producto\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Categoría *</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Seleccionar categoría\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {PRODUCT_CATEGORIES.map((category) => (\n                            <SelectItem key={category.value} value={category.value}>\n                              {category.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Precio (€) *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            min=\"0\" \n                            {...field}\n                            value={field.value || \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"0\" \n                            step=\"1\"\n                            {...field}\n                            value={field.value || \"\"} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"sku\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>SKU</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Código de producto (SKU)\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"w-full md:w-1/2 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"image\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Imagen del Producto</FormLabel>\n                      <div className=\"mt-1 flex items-center\">\n                        <div className=\"h-16 w-16 rounded-md overflow-hidden bg-gray-100 mr-4\">\n                          {imagePreview ? (\n                            <img\n                              src={imagePreview}\n                              alt=\"Vista previa\"\n                              className=\"h-full w-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"h-full w-full flex items-center justify-center\">\n                              <Package className=\"h-8 w-8 text-gray-400\" />\n                            </div>\n                          )}\n                        </div>\n                        <label\n                          htmlFor=\"product-image\"\n                          className=\"bg-gray-200 py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary cursor-pointer\"\n                        >\n                          Cambiar\n                        </label>\n                        <input\n                          type=\"file\"\n                          id=\"product-image\"\n                          name=\"product-image\"\n                          className=\"hidden\"\n                          accept=\"image/*\"\n                          onChange={handleImageChange}\n                        />\n                        <input type=\"hidden\" {...field} />\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descripción</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Descripción detallada del producto\"\n                          rows={5}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-start space-x-3 p-2 rounded-lg\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"mt-0\">Producto activo</FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 mt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"border border-gray-300 shadow-sm\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                {isSubmitting ? \"Guardando...\" : \"Guardar Producto\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11559},"client/src/components/products/ProductTable.tsx":{"content":"import { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Product } from \"@shared/schema\";\nimport { Edit, Trash2, Package } from \"lucide-react\";\nimport { \n  Pagination, \n  PaginationContent,\n  PaginationItem,\n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious \n} from \"@/components/ui/pagination\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ProductTableProps {\n  products: Product[];\n  onEdit: (product: Product) => void;\n  onDelete: (product: Product) => void;\n  isLoading?: boolean;\n}\n\nexport function ProductTable({ products, onEdit, onDelete, isLoading = false }: ProductTableProps) {\n  const handleEdit = (product: Product) => {\n    onEdit(product);\n  };\n\n  const handleDelete = (product: Product) => {\n    onDelete(product);\n  };\n\n  // Función para formatear precio\n  const formatPrice = (price: number): string => {\n    return new Intl.NumberFormat('es-ES', { \n      style: 'currency', \n      currency: 'EUR'\n    }).format(price);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[50px]\">ID</TableHead>\n              <TableHead className=\"w-[70px]\">Imagen</TableHead>\n              <TableHead>Producto</TableHead>\n              <TableHead>Categoría</TableHead>\n              <TableHead>Precio</TableHead>\n              <TableHead>Stock</TableHead>\n              <TableHead>Estado</TableHead>\n              <TableHead className=\"w-[100px]\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-10\">\n                  Cargando productos...\n                </TableCell>\n              </TableRow>\n            ) : products.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-10\">\n                  No hay productos registrados.\n                </TableCell>\n              </TableRow>\n            ) : (\n              products.map((product) => (\n                <TableRow key={product.id}>\n                  <TableCell className=\"font-medium\">{product.id}</TableCell>\n                  <TableCell>\n                    <div className=\"h-10 w-10 rounded-md overflow-hidden bg-gray-100 flex items-center justify-center\">\n                      {product.image ? (\n                        <img \n                          src={product.image} \n                          alt={product.name} \n                          className=\"h-full w-full object-cover\"\n                        />\n                      ) : (\n                        <Package className=\"h-5 w-5 text-gray-400\" />\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{product.name}</div>\n                    {product.sku && (\n                      <div className=\"text-xs text-muted-foreground\">SKU: {product.sku}</div>\n                    )}\n                  </TableCell>\n                  <TableCell>{product.category}</TableCell>\n                  <TableCell className=\"font-medium\">{formatPrice(product.price)}</TableCell>\n                  <TableCell>\n                    <span className={`${\n                      product.stock && product.stock <= 5 ? 'text-orange-600' : \n                      product.stock === 0 ? 'text-red-600' : 'text-green-600'\n                    }`}>\n                      {product.stock === 0 ? 'Sin stock' : product.stock}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    {product.active ? (\n                      <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                        Activo\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"bg-gray-50 text-gray-600 border-gray-200\">\n                        Inactivo\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-primary hover:text-primary/80 hover:bg-primary/10\"\n                        onClick={() => handleEdit(product)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        onClick={() => handleDelete(product)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"mt-4 flex justify-between items-center\">\n        <div className=\"text-sm text-gray-600\">\n          {isLoading ? \"Cargando...\" : `Mostrando ${products.length} productos`}\n        </div>\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>1</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}","size_bytes":5973},"client/src/components/sales/SaleDetail.tsx":{"content":"import { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sale, SaleItem } from \"@shared/schema\";\nimport { \n  ArrowLeft, \n  Calendar, \n  CreditCard, \n  User,\n  ShoppingBag,\n  Truck,\n  FileText\n} from \"lucide-react\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SaleDetailProps {\n  sale: Sale;\n  saleItems: SaleItem[];\n  onBack: () => void;\n  isLoading?: boolean;\n}\n\nexport function SaleDetail({ sale, saleItems = [], onBack, isLoading = false }: SaleDetailProps) {\n  // Función para formatear precio\n  const formatPrice = (price: number): string => {\n    return new Intl.NumberFormat('es-ES', { \n      style: 'currency', \n      currency: 'EUR'\n    }).format(price);\n  };\n\n  // Función para formatear fecha\n  const formatDate = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    \n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  // Función para obtener el color de la insignia de estado\n  const getStatusBadgeStyle = (status: string | null) => {\n    if (!status) return 'bg-gray-50 text-gray-700 border-gray-200';\n    \n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-50 text-green-700 border-green-200';\n      case 'pending':\n        return 'bg-orange-50 text-orange-700 border-orange-200';\n      case 'canceled':\n        return 'bg-red-50 text-red-700 border-red-200';\n      default:\n        return 'bg-gray-50 text-gray-700 border-gray-200';\n    }\n  };\n\n  // Traducciones de estados\n  const translateStatus = (status: string | null) => {\n    if (!status) return 'Desconocido';\n    \n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'Completada';\n      case 'pending':\n        return 'Pendiente';\n      case 'canceled':\n        return 'Cancelada';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Detalle de Venta #{sale.id}</h2>\n          <p className=\"text-muted-foreground\">\n            Información completa de la venta\n          </p>\n        </div>\n        <Button\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"bg-gray-200 hover:bg-gray-300 text-gray-700\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Volver al Listado\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Información básica de la venta */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-primary\" />\n                Información de la Venta\n              </span>\n              <Badge variant=\"outline\" className={getStatusBadgeStyle(sale.status)}>\n                {translateStatus(sale.status)}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">Cliente</p>\n                <p className=\"flex items-center gap-2 font-medium\">\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                  {sale.clientName}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">Fecha</p>\n                <p className=\"flex items-center gap-2 font-medium\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  {formatDate(sale.createdAt)}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">Método de pago</p>\n                <p className=\"flex items-center gap-2 font-medium\">\n                  <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                  {sale.paymentMethod}\n                </p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">Total</p>\n                <p className=\"text-xl font-bold text-primary\">\n                  {formatPrice(sale.total)}\n                </p>\n              </div>\n            </div>\n            {sale.notes && (\n              <div className=\"mt-4 border-t pt-4\">\n                <p className=\"text-sm text-muted-foreground\">Notas</p>\n                <p className=\"mt-1\">{sale.notes}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Resumen */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShoppingBag className=\"h-5 w-5 text-primary\" />\n              Resumen\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Cantidad de productos</span>\n                <span className=\"font-medium\">{saleItems.length}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Unidades totales</span>\n                <span className=\"font-medium\">\n                  {saleItems.reduce((acc, item) => acc + item.quantity, 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm border-t border-dashed border-gray-200 pt-2 mt-2\">\n                <span className=\"text-muted-foreground\">Subtotal</span>\n                <span className=\"font-medium\">\n                  {formatPrice(saleItems.reduce((acc, item) => acc + item.subtotal, 0))}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm font-bold\">\n                <span>Total</span>\n                <span className=\"text-primary\">{formatPrice(sale.total)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detalle de productos */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Truck className=\"h-5 w-5 text-primary\" />\n            Productos\n          </CardTitle>\n          <CardDescription>\n            Detalle de los productos incluidos en esta venta\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Producto</TableHead>\n                <TableHead className=\"text-right\">Cantidad</TableHead>\n                <TableHead className=\"text-right\">Precio Unitario</TableHead>\n                <TableHead className=\"text-right\">Subtotal</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {saleItems.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={4} className=\"text-center py-4\">\n                    No hay productos en esta venta\n                  </TableCell>\n                </TableRow>\n              ) : (\n                saleItems.map((item, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"font-medium\">{item.productName}</TableCell>\n                    <TableCell className=\"text-right\">{item.quantity}</TableCell>\n                    <TableCell className=\"text-right\">{formatPrice(item.unitPrice)}</TableCell>\n                    <TableCell className=\"text-right font-medium\">{formatPrice(item.subtotal)}</TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n        <CardFooter className=\"flex justify-end\">\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Total</p>\n            <p className=\"text-xl font-bold text-primary\">{formatPrice(sale.total)}</p>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","size_bytes":8669},"client/src/components/sales/SaleTable.tsx":{"content":"import { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sale } from \"@shared/schema\";\nimport { Eye, Trash2, CreditCard, Calendar } from \"lucide-react\";\nimport { \n  Pagination, \n  PaginationContent,\n  PaginationItem,\n  PaginationLink, \n  PaginationNext, \n  PaginationPrevious \n} from \"@/components/ui/pagination\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SaleTableProps {\n  sales: Sale[];\n  onView: (sale: Sale) => void;\n  onDelete: (sale: Sale) => void;\n  isLoading?: boolean;\n}\n\nexport function SaleTable({ sales, onView, onDelete, isLoading = false }: SaleTableProps) {\n  // Función para formatear precio\n  const formatPrice = (price: number): string => {\n    return new Intl.NumberFormat('es-ES', { \n      style: 'currency', \n      currency: 'EUR'\n    }).format(price);\n  };\n\n  // Función para formatear fecha\n  const formatDate = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    \n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  // Función para obtener el color de la insignia de estado\n  const getStatusBadgeStyle = (status: string | null) => {\n    if (!status) return 'bg-gray-50 text-gray-700 border-gray-200';\n    \n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-50 text-green-700 border-green-200';\n      case 'pending':\n        return 'bg-orange-50 text-orange-700 border-orange-200';\n      case 'canceled':\n        return 'bg-red-50 text-red-700 border-red-200';\n      default:\n        return 'bg-gray-50 text-gray-700 border-gray-200';\n    }\n  };\n\n  // Traducciones de estados\n  const translateStatus = (status: string | null) => {\n    if (!status) return 'Desconocido';\n    \n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'Completada';\n      case 'pending':\n        return 'Pendiente';\n      case 'canceled':\n        return 'Cancelada';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[50px]\">ID</TableHead>\n              <TableHead>Cliente</TableHead>\n              <TableHead>Fecha</TableHead>\n              <TableHead>Total</TableHead>\n              <TableHead>Método de Pago</TableHead>\n              <TableHead>Estado</TableHead>\n              <TableHead className=\"w-[100px]\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-10\">\n                  Cargando ventas...\n                </TableCell>\n              </TableRow>\n            ) : sales.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-10\">\n                  No hay ventas registradas.\n                </TableCell>\n              </TableRow>\n            ) : (\n              sales.map((sale) => (\n                <TableRow key={sale.id}>\n                  <TableCell className=\"font-medium\">{sale.id}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      {sale.clientName}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1 text-sm\">\n                      <Calendar className=\"h-3.5 w-3.5 text-muted-foreground\" />\n                      <span>{formatDate(sale.createdAt)}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{formatPrice(sale.total)}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1.5\">\n                      <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{sale.paymentMethod}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className={getStatusBadgeStyle(sale.status)}>\n                      {translateStatus(sale.status)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-primary hover:text-primary/80 hover:bg-primary/10\"\n                        onClick={() => onView(sale)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10\"\n                        onClick={() => onDelete(sale)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"mt-4 flex justify-between items-center\">\n        <div className=\"text-sm text-gray-600\">\n          {isLoading ? \"Cargando...\" : `Mostrando ${sales.length} ventas`}\n        </div>\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>1</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}","size_bytes":6203},"client/src/components/ui/DeleteConfirmationDialog.tsx":{"content":"import { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle\n} from \"@/components/ui/alert-dialog\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface DeleteConfirmationDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title?: string;\n  description?: string;\n  cancelText?: string;\n  confirmText?: string;\n}\n\nexport function DeleteConfirmationDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title = \"Confirmar Eliminación\",\n  description = \"¿Está seguro que desea eliminar esta mascota? Esta acción no se puede deshacer.\",\n  cancelText = \"Cancelar\",\n  confirmText = \"Sí, Eliminar\"\n}: DeleteConfirmationDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"flex justify-center mb-2\">\n            <AlertTriangle className=\"h-12 w-12 text-warning\" />\n          </div>\n          <AlertDialogTitle className=\"text-center\">{title}</AlertDialogTitle>\n          <AlertDialogDescription className=\"text-center\">\n            {description}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter className=\"flex justify-center space-x-3\">\n          <AlertDialogCancel\n            className=\"px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n          >\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-destructive hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-destructive\"\n          >\n            {confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2066},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.HTMLAttributes<HTMLElement>\n>(({ className, ...props }, ref) => (\n  <nav\n    ref={ref}\n    aria-label=\"breadcrumb\"\n    className={cn(\n      \"flex flex-wrap items-center text-sm text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.OlHTMLAttributes<HTMLOListElement>\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 sm:gap-2.5 list-none p-0 m-0\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.LiHTMLAttributes<HTMLLIElement>\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\n        \"transition-colors hover:text-foreground flex items-center\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight className=\"h-4 w-4\" />}\n  </span>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n}","size_bytes":2392},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/wpc/WpcCategoryCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronRight } from \"lucide-react\";\n\ninterface WpcCategoryCardProps {\n  title: string;\n  description: string;\n  imageSrc: string;\n  link: string;\n}\n\nexport function WpcCategoryCard({ title, description, imageSrc, link }: WpcCategoryCardProps) {\n  return (\n    <Card className=\"overflow-hidden h-full flex flex-col\">\n      <div className=\"p-1\">\n        <div className=\"h-48 rounded overflow-hidden bg-muted\">\n          <img \n            src={imageSrc} \n            alt={title}\n            className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n      </div>\n      <CardContent className=\"flex-grow pt-4\">\n        <h3 className=\"text-lg font-semibold\">{title}</h3>\n        <p className=\"text-sm text-muted-foreground mt-2 line-clamp-3\">\n          {description}\n        </p>\n      </CardContent>\n      <CardFooter className=\"pt-0\">\n        <Link href={link} className=\"w-full\">\n          <Button variant=\"outline\" className=\"w-full group\">\n            Ver productos\n            <ChevronRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n          </Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":1358},"client/src/components/wpc/WpcProductCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info } from \"lucide-react\";\n\ninterface WpcProductCardProps {\n  title: string;\n  description: string;\n  imageSrc: string;\n  features: string[];\n  applications: string[];\n  onClick: () => void;\n}\n\nexport function WpcProductCard({ \n  title, \n  description, \n  imageSrc, \n  features, \n  applications,\n  onClick \n}: WpcProductCardProps) {\n  return (\n    <Card className=\"overflow-hidden h-full flex flex-col transition-all hover:shadow-md cursor-pointer\" onClick={onClick}>\n      <div className=\"p-1\">\n        <div className=\"h-40 rounded overflow-hidden bg-muted\">\n          <img \n            src={imageSrc} \n            alt={title}\n            className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n      </div>\n      <CardContent className=\"flex-grow pt-4\">\n        <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n        <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2 mb-4\">\n          {description}\n        </p>\n        \n        <div className=\"space-y-3\">\n          <div>\n            <h4 className=\"text-xs font-medium text-muted-foreground mb-1\">Características:</h4>\n            <div className=\"flex flex-wrap gap-1\">\n              {features.slice(0, 2).map((feature, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"bg-primary/10 text-xs\">\n                  {feature}\n                </Badge>\n              ))}\n              {features.length > 2 && (\n                <Badge variant=\"secondary\" className=\"bg-primary/10 text-xs\">\n                  +{features.length - 2} más\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-xs font-medium text-muted-foreground mb-1\">Aplicaciones:</h4>\n            <div className=\"flex flex-wrap gap-1\">\n              {applications.slice(0, 2).map((application, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {application}\n                </Badge>\n              ))}\n              {applications.length > 2 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{applications.length - 2} más\n                </Badge>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"mt-4 w-full text-primary hover:bg-primary/10 hover:text-primary\"\n        >\n          <Info className=\"h-4 w-4 mr-1\" />\n          Ver detalles\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2768},"client/src/lib/utils/formatUtils.ts":{"content":"/**\n * Formatea la edad de una mascota según su unidad\n */\nexport function formatAge(age: number | null | undefined, ageUnit: string): string {\n  if (age === null || age === undefined) return 'N/A';\n  \n  const unit = ageUnit === 'years' ? 'años' : 'meses';\n  return `${age} ${unit}`;\n}\n\n/**\n * Formatea peso en kilogramos\n */\nexport function formatWeight(weight: number | null | undefined): string {\n  if (weight === null || weight === undefined) return 'N/A';\n  return `${weight} kg`;\n}\n\n/**\n * Truncar texto largo\n */\nexport function truncateText(text: string | null | undefined, maxLength = 50): string {\n  if (!text) return '';\n  return text.length > maxLength ? `${text.slice(0, maxLength)}...` : text;\n}\n","size_bytes":712},"client/src/pages/wpc/[categoryId].tsx":{"content":"import { useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { WpcProductCard } from \"@/components/wpc/WpcProductCard\";\nimport { wpcCategories, wpcProducts } from \"@/lib/wpc-data\";\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator } from \"@/components/ui/breadcrumb\";\nimport { ChevronRight, ChevronLeft, HomeIcon } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function WpcCategoryPage() {\n  const [, params] = useRoute(\"/wpc/:categoryId\");\n  const categoryId = params?.categoryId || \"\";\n\n  // Estado para el diálogo de detalles del producto\n  const [selectedProduct, setSelectedProduct] = useState<any | null>(null);\n\n  // Buscar la categoría actual\n  const category = wpcCategories.find(cat => cat.id === categoryId);\n  \n  // Obtener los productos de esta categoría\n  const products = wpcProducts[categoryId as keyof typeof wpcProducts] || [];\n\n  // Si la categoría no existe, mostrar página de error\n  if (!category) {\n    return (\n      <MainLayout title=\"Categoría no encontrada\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold text-primary mb-4\">Categoría no encontrada</h1>\n          <p className=\"text-muted-foreground mb-6\">La categoría que estás buscando no existe o ha sido eliminada.</p>\n          <Link href=\"/wpc\">\n            <Button>\n              <ChevronLeft className=\"mr-2 h-4 w-4\" />\n              Volver a categorías WPC\n            </Button>\n          </Link>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  // Mostrar modal de detalles del producto\n  const handleProductClick = (product: any) => {\n    setSelectedProduct(product);\n  };\n\n  return (\n    <MainLayout title={category.title}>\n      <div className=\"animate-fade-in space-y-8\">\n        {/* Breadcrumbs */}\n        <Breadcrumb className=\"mb-6\">\n          <BreadcrumbList>\n            <BreadcrumbItem>\n              <BreadcrumbLink href=\"/\">\n                <HomeIcon className=\"h-4 w-4 mr-1\" />\n                Inicio\n              </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator>\n              <ChevronRight className=\"h-4 w-4\" />\n            </BreadcrumbSeparator>\n            <BreadcrumbItem>\n              <BreadcrumbLink href=\"/wpc\">WPC</BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator>\n              <ChevronRight className=\"h-4 w-4\" />\n            </BreadcrumbSeparator>\n            <BreadcrumbItem>\n              <BreadcrumbLink>{category.title}</BreadcrumbLink>\n            </BreadcrumbItem>\n          </BreadcrumbList>\n        </Breadcrumb>\n\n        {/* Hero de la categoría */}\n        <div \n          className=\"relative h-64 rounded-lg overflow-hidden bg-cover bg-center flex items-center justify-center\"\n          style={{ backgroundImage: `url(${category.heroImage})` }}\n        >\n          <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n          <div className=\"relative z-10 text-center p-6\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">{category.title}</h1>\n            <p className=\"text-xl text-white/90 max-w-2xl\">{category.shortDescription}</p>\n          </div>\n        </div>\n\n        {/* Descripción de la categoría */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-primary\">{category.title}</CardTitle>\n            <CardDescription>{category.shortDescription}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">{category.longDescription}</p>\n              \n              <div>\n                <h3 className=\"font-medium mb-2\">Beneficios principales:</h3>\n                <ul className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                  {category.benefits.map((benefit, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1 flex-shrink-0\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                          <path d=\"M20 6L9 17l-5-5\" />\n                        </svg>\n                      </span>\n                      <span className=\"text-sm\">{benefit}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Productos de la categoría */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bold\">Productos {category.title}</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Explore nuestra selección de productos {category.title.toLowerCase()}\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {products.map((product) => (\n              <WpcProductCard\n                key={product.id}\n                title={product.title}\n                description={product.description}\n                imageSrc={product.imageSrc}\n                features={product.features}\n                applications={product.applications}\n                onClick={() => handleProductClick(product)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de detalles del producto */}\n      <Dialog open={!!selectedProduct} onOpenChange={() => setSelectedProduct(null)}>\n        <DialogContent className=\"max-w-3xl\">\n          {selectedProduct && (\n            <>\n              <DialogHeader>\n                <DialogTitle>{selectedProduct.title}</DialogTitle>\n                <DialogDescription>{selectedProduct.description}</DialogDescription>\n              </DialogHeader>\n\n              <Tabs defaultValue=\"overview\" className=\"mt-6\">\n                <TabsList className=\"mb-4\">\n                  <TabsTrigger value=\"overview\">Descripción</TabsTrigger>\n                  <TabsTrigger value=\"specs\">Especificaciones</TabsTrigger>\n                  <TabsTrigger value=\"gallery\">Galería</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <div>\n                    <img \n                      src={selectedProduct.imageSrc} \n                      alt={selectedProduct.title} \n                      className=\"w-full rounded-lg object-cover h-64\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <p>{selectedProduct.details}</p>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-2\">Características:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedProduct.features.map((feature: string, index: number) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-primary/10\">\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-2\">Aplicaciones:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedProduct.applications.map((application: string, index: number) => (\n                          <Badge key={index} variant=\"outline\">\n                            {application}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"specs\">\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {Object.entries(selectedProduct.specifications).map(([key, value]: [string, any]) => (\n                        <div key={key} className=\"border rounded-lg p-4\">\n                          <h5 className=\"font-medium capitalize mb-2\">{key}:</h5>\n                          {Array.isArray(value) ? (\n                            <ul className=\"list-disc list-inside\">\n                              {value.map((item, i) => (\n                                <li key={i} className=\"text-sm text-muted-foreground\">{item}</li>\n                              ))}\n                            </ul>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">{value}</p>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"gallery\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {selectedProduct.detailImages.map((img: string, index: number) => (\n                      <div key={index} className=\"overflow-hidden rounded-lg\">\n                        <img \n                          src={img} \n                          alt={`Imagen ${index + 1} de ${selectedProduct.title}`} \n                          className=\"w-full h-auto object-cover hover:scale-105 transition-transform duration-300\"\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setSelectedProduct(null)}\n                >\n                  Cerrar\n                </Button>\n                <Button onClick={() => {\n                  // Aquí iría la lógica para solicitar información, redirección a formulario, etc.\n                  alert('Funcionalidad de contacto pendiente de implementación');\n                }}>\n                  Solicitar información\n                </Button>\n              </DialogFooter>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}","size_bytes":10661},"client/src/pages/wpc/index.tsx":{"content":"import { MainLayout } from \"@/components/layout/MainLayout\";\nimport { WpcCategoryCard } from \"@/components/wpc/WpcCategoryCard\";\nimport { wpcCategories } from \"@/lib/wpc-data\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function WpcPage() {\n  return (\n    <MainLayout title=\"Productos WPC\">\n      <div className=\"animate-fade-in space-y-8\">\n        <div className=\"text-center space-y-4 py-8\">\n          <h1 className=\"text-4xl font-bold text-primary\">Productos WPC</h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Soluciones innovadoras en madera compuesta (Wood Plastic Composite) para proyectos de interior y exterior\n          </p>\n        </div>\n        \n        <div className=\"bg-muted p-6 rounded-lg\">\n          <div className=\"max-w-3xl mx-auto text-center space-y-4\">\n            <h2 className=\"text-2xl font-bold\">¿Qué es el WPC?</h2>\n            <p className=\"text-muted-foreground\">\n              WPC (Wood Plastic Composite) es un material compuesto de madera y plástico \n              que combina la estética natural de la madera con la durabilidad y resistencia \n              del plástico. Este material innovador es ideal para aplicaciones donde se requiere \n              alta durabilidad, bajo mantenimiento y resistencia a la humedad.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4\">\n              <div className=\"bg-card p-4 rounded-lg shadow-sm\">\n                <h3 className=\"font-medium mb-2\">Sostenible</h3>\n                <p className=\"text-sm\">Utilizamos materiales reciclados en su fabricación, reduciendo la tala de árboles.</p>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg shadow-sm\">\n                <h3 className=\"font-medium mb-2\">Durable</h3>\n                <p className=\"text-sm\">Resistente a la humedad, rayos UV, insectos y no se pudre ni se deforma con el tiempo.</p>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg shadow-sm\">\n                <h3 className=\"font-medium mb-2\">Bajo mantenimiento</h3>\n                <p className=\"text-sm\">No requiere barnizado, pintado ni tratamientos periódicos como la madera tradicional.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <Separator />\n        \n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bold\">Nuestras categorías WPC</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Explore nuestra gama de soluciones en material compuesto para distintas aplicaciones\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {wpcCategories.map((category) => (\n              <WpcCategoryCard\n                key={category.id}\n                title={category.title}\n                description={category.shortDescription}\n                imageSrc={category.imageSrc}\n                link={`/wpc/${category.id}`}\n              />\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"bg-primary/5 p-6 rounded-lg my-8\">\n          <div className=\"max-w-3xl mx-auto space-y-4\">\n            <h2 className=\"text-2xl font-bold text-primary\">Ventajas de los productos WPC</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <ul className=\"space-y-2\">\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Resistente a la humedad y agua</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>No se agrieta, astilla ni deforma</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Resistente a rayos UV e intemperie</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Resistente a insectos y hongos</span>\n                </li>\n              </ul>\n              <ul className=\"space-y-2\">\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Apariencia natural de madera</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Fácil instalación y mantenimiento</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Ecológico y reciclable</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"bg-primary/20 p-1 rounded-full mr-2 mt-1\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-primary\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M20 6L9 17l-5-5\" />\n                    </svg>\n                  </span>\n                  <span>Amplia variedad de colores y acabados</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":7780}},"version":1}